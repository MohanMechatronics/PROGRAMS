/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 02.08.2025 07:36:42

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242592;
#else
constexpr int kTensorArenaSize = 241568;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0025850366801023483, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data2[3] = { 25568, -37218, -28659, };
const TfArray<1, int> tensor_dimension2 = { 1, { 3 } };
const TfArray<3, float> quant2_scale = { 3, { 0.00020319127361290157, 0.00015039650315884501, 0.00019285362213850021, } };
const TfArray<3, int> quant2_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data3[3*1*1*32] = { 
  /* [0][0][][] */ 29,36,68,-106,-89,-4,-4,5,-37,71,73,50,-3,-89,37,-15,-60,127,39,74,-63,-38,-3,-66,-119,45,-58,-10,109,-18,-15,-28, 
  /* [1][0][][] */ 54,-35,-52,-20,-47,126,3,-1,127,-45,-35,-101,-51,78,41,-46,99,-67,9,-71,-86,3,110,88,27,40,19,-36,-100,-37,-7,-8, 
  /* [2][0][][] */ -16,60,-47,56,61,-28,-11,91,70,24,70,-30,-67,-75,69,89,-57,-127,22,-70,58,90,-29,-54,56,-22,-1,-79,-2,-43,58,-1, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 3,1,1,32 } };
const TfArray<3, float> quant3_scale = { 3, { 0.0044308011420071125, 0.0032795551232993603, 0.0042053777724504471, } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&g0::quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data4[32] = { 871, 124, -1365, -442, -27, 194, -1286, 98, 116, 3, -695, 1012, -870, -1017, -419, -136, -736, 1205, -858, -1613, -1285, -68, -81, -1469, -252, -1606, -1396, -1332, 715, -1355, -1233, -1314, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 5.9096553741255775e-05, 5.1807153795380145e-05, 5.1142611482646316e-05, 6.4054256654344499e-05, 6.2933708250056952e-05, 6.3107938331086189e-05, 5.0509057473391294e-05, 5.0189966714242473e-05, 6.1535625718533993e-05, 6.6717017034534365e-05, 5.9369984228396788e-05, 8.8322849478572607e-05, 5.6458873586962e-05, 6.2893697759136558e-05, 5.3044619562570006e-05, 6.3834930188022554e-05, 5.1764280215138569e-05, 9.3089016445446759e-05, 5.0748261855915189e-05, 5.5746008001733571e-05, 4.5889129978604615e-05, 6.0743812355212867e-05, 6.4007603214122355e-05, 5.2858769777230918e-05, 6.5363426983822137e-05, 6.0076425143051893e-05, 5.3666874009650201e-05, 5.3656731324736029e-05, 7.3883587901946157e-05, 5.0792146794265136e-05, 4.8861591494642198e-05, 5.3964053222443908e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -43,-29,54,-2,59,-50,-49,-59,29,-86,-79,-36,61,0,13,57,-25,-6,-56,-23,-41,-57,14,90,-65,1,75,-30,90,25,-55,-42,61,-70,-44,29,-67,-77,-62,38,-1,-82,-66,82,48,-115,55,-31,36,-54,-84,44,-44,-59,-53,121,20,62,95,-119,-36,63,-27,41,-13,-11,87,64,16,76,73,-75,86,-89,47,77,-57,23,-35,45,35,-3,39,-48,-50,-29,-77,89,26,127,-5,-95,-4,51,-9,23, 
  /* [1][0][][] */ -30,41,-35,10,-40,70,-7,-24,68,-116,-85,76,62,-13,19,76,71,-80,-10,60,-41,-2,27,36,28,-10,-43,109,13,9,98,-56,28,94,-6,23,28,43,-35,-99,-62,-5,13,-82,-69,59,-2,-33,-58,-60,69,35,14,47,-127,-34,0,76,34,88,-73,60,-107,-77,-46,40,59,47,93,33,11,-51,-81,77,-24,20,81,-61,-35,81,-47,69,-23,-105,43,56,-70,-76,73,69,88,41,67,78,-40,5, 
  /* [2][0][][] */ 7,-7,-82,51,-44,-75,50,49,-119,114,-63,84,43,-47,37,-127,-78,-54,76,13,-119,-47,59,-15,-53,67,56,-28,-89,34,46,52,-81,-48,-112,-115,-105,56,61,-54,-46,-76,-24,-39,-101,65,-51,-94,54,4,57,-14,-70,25,-5,-15,-31,48,-84,-30,-49,22,-60,33,50,4,11,42,-109,25,-31,-88,-4,-91,-7,-5,-80,-53,-34,-28,-1,-98,-42,25,-34,-116,-49,-59,42,59,-52,-26,-48,-99,-55,-85, 
  /* [3][0][][] */ 56,11,30,-57,-80,23,-105,1,23,-34,37,-50,61,62,46,13,42,48,-93,-22,71,-61,-38,-86,-41,-110,-60,81,14,-69,52,-4,-69,-27,-18,-37,-87,-74,-11,30,-60,-95,-65,9,55,34,-23,-84,10,-51,-29,-20,43,3,17,-63,-121,-83,-125,-33,-73,15,-64,31,12,-19,-62,-21,-30,-97,-10,31,9,-127,42,-68,31,33,70,-35,-72,-106,-17,3,30,13,-48,-86,-60,-4,-4,-72,31,-86,-118,-31, 
  /* [4][0][][] */ 48,91,13,12,-29,-18,14,22,37,13,6,-8,26,-22,-7,-22,-27,-6,-98,-22,70,-62,73,26,-36,-30,54,-22,-37,34,-33,-33,14,85,8,-94,-60,-62,-84,45,-44,-49,-42,-43,30,94,41,33,-38,-26,-66,-58,-53,18,-92,22,-13,-55,6,31,8,-51,-74,-40,-32,50,-3,-13,18,-92,-78,-95,-29,-42,86,11,60,-57,7,-26,2,-54,-88,-72,22,24,50,4,-74,-73,34,42,-9,50,-127,-51, 
  /* [5][0][][] */ 37,-64,19,54,23,-125,28,52,52,-110,-7,-65,26,38,44,33,61,61,-75,86,16,30,27,-1,-53,-68,8,-65,29,35,-41,-56,-24,-27,-31,-12,-59,-53,41,36,-127,-103,39,79,-5,-36,-6,-25,-50,32,-2,-7,38,-8,37,8,64,50,-22,-69,41,-35,32,-42,-15,52,6,7,31,16,76,-35,-21,32,-10,-43,22,-9,16,67,71,-8,11,28,-78,52,-8,44,26,-41,69,59,-38,19,42,-53, 
  /* [6][0][][] */ -10,-60,69,38,-98,-73,-25,31,-42,-94,-5,-99,47,21,72,-127,10,-7,-24,59,-97,-126,63,22,-87,-93,-33,-79,-48,-121,26,-90,-105,-126,-65,-114,-36,9,-117,44,57,25,-9,-45,-126,63,-100,-64,-68,-9,-46,-72,22,-26,60,-47,-18,-31,-84,71,-111,-23,88,-58,-69,23,60,-66,42,-31,-117,-26,21,-83,-104,-62,-98,-113,-81,-53,1,-48,9,-34,-85,-28,-42,-107,36,48,55,-14,-69,-81,64,-51, 
  /* [7][0][][] */ 117,76,-10,-28,-70,97,-48,-4,105,-39,-84,-9,60,-69,45,86,46,-10,-68,100,46,35,13,99,-54,52,50,71,-60,102,-9,32,-2,27,64,81,-66,50,-27,-16,45,-96,107,80,43,23,111,-81,-19,-44,-127,-72,-13,47,-61,38,70,-63,4,-31,12,-12,6,-105,-55,-36,64,32,-88,39,56,-4,89,5,70,27,-34,62,-71,66,97,-41,-6,-122,96,-20,-111,97,77,8,86,76,-56,-28,-101,-56, 
  /* [8][0][][] */ 15,37,-18,-60,33,7,-61,-5,7,-43,30,48,14,-34,-48,-32,-35,81,-127,31,21,-12,75,99,-64,17,50,71,-41,28,-73,86,43,-24,44,-28,106,-27,-12,69,-1,32,-51,-64,9,-3,0,90,34,-91,-72,-28,-33,-34,-24,-61,-24,92,-55,81,99,38,0,77,-17,-26,0,77,-60,55,26,-4,68,26,23,4,-12,107,73,76,36,15,-73,-120,35,-1,44,-8,29,-16,-48,83,-106,-61,-58,34, 
  /* [9][0][][] */ -2,-14,86,48,52,-74,-35,-45,10,20,-4,68,-23,-56,-72,-9,5,-27,-72,-43,-5,56,-66,-71,65,-14,-2,14,-10,-55,-38,63,20,-9,13,-16,-52,36,-20,-30,35,-63,57,-64,26,28,-55,48,6,3,-26,-37,75,-84,-38,61,40,-27,9,-7,-58,63,31,-40,-41,-8,69,27,-24,88,62,-40,1,85,-66,-64,-63,-87,-27,66,36,18,101,70,-28,-88,12,-7,58,15,-24,84,74,-11,127,-16, 
  /* [10][0][][] */ -52,57,59,-93,-48,54,50,6,-3,-30,7,-93,57,44,-43,12,-58,35,-127,-82,-40,9,43,-80,-18,3,-98,-86,-62,46,-90,-77,19,56,71,15,-63,-61,-46,19,-58,44,-84,-29,-101,-37,-10,-85,-59,-9,-33,-32,32,-17,-103,-38,-122,-19,-9,-40,-21,31,39,4,33,-68,-104,-30,-4,-50,-96,-92,52,-17,-61,46,-19,-14,37,12,41,-31,25,22,-74,2,62,-53,6,-17,-23,-58,-77,-76,-96,-102, 
  /* [11][0][][] */ 79,21,48,86,81,56,58,78,54,82,8,117,-1,5,5,-16,-26,-41,61,34,21,35,32,-54,-28,-22,5,43,36,-3,67,13,-30,-18,29,47,-19,91,63,-20,43,127,-34,25,-2,31,19,-21,89,75,123,27,13,-13,38,35,9,-20,43,-31,-37,82,77,44,80,52,-30,29,62,48,-22,-1,42,102,-30,48,-30,15,-8,42,-32,21,18,15,27,-10,24,9,-14,61,16,-39,-34,-33,-11,3, 
  /* [12][0][][] */ -9,30,-65,-20,50,-6,-38,3,-70,69,-31,3,-56,-10,17,-84,-98,-48,-23,-86,4,-25,-12,50,-60,-30,52,-99,50,-12,-46,72,-43,-71,-57,2,-27,-80,-36,9,127,16,-110,-54,-39,-87,-54,65,-58,-99,-76,107,4,-4,-79,43,-4,-68,16,32,19,67,-9,21,62,5,-57,69,24,52,11,35,41,59,-36,-18,-51,1,-113,-95,-67,73,9,74,-50,13,20,62,-86,-106,48,11,78,-30,13,39, 
  /* [13][0][][] */ 53,-59,32,40,49,56,64,46,49,-80,-32,-50,51,30,38,-74,-69,-15,-85,41,29,-27,111,-14,-26,13,33,-24,-76,-76,16,11,26,50,-12,-2,-45,-51,14,81,-90,-8,-27,26,0,-20,-28,-66,53,35,-77,-127,-61,-5,80,-47,-41,44,7,-80,7,92,-37,11,-88,-66,-83,27,-51,5,97,14,-59,16,-71,-36,-49,63,62,-62,7,-89,68,-32,-80,-93,80,93,-41,-25,-81,20,56,-58,54,-50, 
  /* [14][0][][] */ -71,-92,79,61,46,-47,-51,-109,-71,-89,27,57,-27,-81,-78,-63,-43,-60,-60,34,-43,21,1,66,-69,-117,-19,33,-88,-99,-97,15,69,-51,-28,-1,103,78,-3,-87,-65,-127,60,75,44,-81,77,-42,109,4,42,16,80,-76,-50,11,-86,3,55,53,-8,-82,-79,34,-72,-30,77,-101,-94,-57,-73,49,9,52,44,-77,52,-57,46,52,46,-71,-71,-67,-94,-120,-123,97,97,27,83,-43,11,94,-54,75, 
  /* [15][0][][] */ 21,-5,0,56,57,-62,-1,-88,46,-27,-57,-7,76,3,-62,-59,38,-26,-97,-11,35,10,43,87,56,24,3,80,14,42,51,-77,-13,7,-45,-3,-50,63,43,-74,2,42,-5,-14,-10,-31,-10,-46,-35,-50,-25,15,-72,-85,-86,-13,29,19,-44,89,-45,-72,-40,15,-29,75,-52,10,-36,15,39,-95,20,-15,51,-89,9,24,74,70,-39,28,-56,-55,-66,-58,-98,15,66,53,-70,-10,37,81,-127,74, 
  /* [16][0][][] */ -81,-8,55,-80,40,73,-22,52,35,43,-103,25,-24,-60,-29,-76,127,98,53,83,93,59,-16,62,-20,43,-29,28,-93,20,0,9,-76,42,46,36,-6,6,-25,-25,-29,-94,26,87,81,48,58,-30,-15,-121,-24,96,-27,102,78,31,30,99,74,-19,121,110,57,62,28,-11,3,55,14,101,-18,19,7,45,41,88,-3,111,-88,-30,-24,-88,-27,-43,-15,100,78,32,47,8,-25,57,45,-27,-59,0, 
  /* [17][0][][] */ 77,-69,88,85,-30,-23,-31,-47,50,37,56,59,43,93,-50,21,13,6,127,49,-21,49,8,-49,42,93,-42,-6,82,-34,61,31,0,7,20,43,-45,108,-8,-36,4,37,-27,-23,-9,71,93,-3,24,124,33,47,7,75,56,-17,-4,22,13,-55,-2,-56,59,65,-1,-42,17,-38,-13,-7,76,26,3,-8,-39,61,43,-46,12,-31,13,70,-24,50,-23,89,65,-25,36,84,28,-75,54,71,38,62, 
  /* [18][0][][] */ -56,75,124,-75,-36,-68,-119,-23,-20,24,-107,-71,-52,32,24,-49,-5,-48,8,-48,67,-51,-7,-87,-21,-117,-38,91,22,10,29,24,-21,-11,-127,-115,-56,3,-56,27,-41,27,-51,-28,-114,50,43,-41,-12,-32,32,-34,-117,-25,-25,68,-88,5,-44,-81,48,68,-34,1,-85,-89,-58,83,60,-91,-97,62,-107,-36,-90,-103,32,19,-26,-73,-57,7,-23,-53,106,-47,59,32,-118,-68,-34,85,54,-50,12,-44, 
  /* [19][0][][] */ -16,-11,24,2,10,-30,51,44,41,-67,-9,-28,-105,-6,-77,18,34,-102,70,12,-50,26,-75,-23,26,-92,-3,-88,-104,-127,-69,5,27,-94,-10,-38,-30,-76,-64,-101,73,-109,-99,-27,-92,-5,33,-96,-44,-3,-49,84,-61,53,-16,-34,-18,48,-34,-50,9,-65,56,29,-77,-36,-49,-31,-35,16,24,-69,-79,-113,-77,-95,-53,-117,-23,45,9,-108,-54,116,-97,31,-23,-30,35,-14,-34,15,-59,60,39,-72, 
  /* [20][0][][] */ 14,69,90,69,-114,92,-21,29,28,-20,-88,-44,-24,97,11,-74,-81,-62,-97,-61,11,-38,-91,-94,54,-87,-124,47,16,-15,-13,71,67,56,-43,52,7,-63,-47,-127,-63,-70,-96,-114,-51,-27,-34,50,28,-96,-121,38,16,92,12,-36,64,45,62,118,77,-77,-111,-66,-61,-56,-93,21,-72,-97,-84,42,-84,-93,13,-27,86,35,92,91,63,4,44,-19,81,65,-34,45,23,49,27,53,21,23,-33,-37, 
  /* [21][0][][] */ 76,64,65,-66,55,-62,29,3,3,-102,-56,20,11,29,-36,-48,-74,-36,-57,-3,75,-29,61,-39,47,-97,-16,68,11,3,-15,-16,-10,14,-61,-86,101,45,-106,-19,-26,-27,46,3,-75,-42,-39,76,-70,-49,-49,37,25,25,-127,27,-74,46,-38,97,45,-61,-39,-27,49,26,-26,-43,-77,17,43,0,34,-31,63,29,-64,4,53,94,20,54,29,-105,34,-110,30,-42,-69,58,82,-68,-52,-42,-27,-24, 
  /* [22][0][][] */ -1,-46,-74,-92,52,-64,75,49,-86,32,-51,-127,80,-97,-63,-58,38,75,-102,-24,49,-56,32,32,74,-28,-57,56,-51,-48,-103,-64,32,29,15,-10,15,-68,-32,-60,-67,-63,-2,72,55,-94,36,-37,-18,-100,-21,-21,-34,-89,-16,40,2,-9,0,-39,88,-44,-75,-79,-35,0,-61,-43,52,76,-16,13,-43,-51,44,-69,38,-21,41,59,61,-112,-111,-117,31,44,64,-7,-54,28,-51,33,-13,15,-19,56, 
  /* [23][0][][] */ 18,-106,-29,14,49,-123,-24,-121,21,-80,35,34,-19,-120,-13,-69,37,-7,-97,102,47,-96,51,-62,-39,-36,34,-18,27,5,29,-65,-43,2,-14,-7,87,-51,-121,8,-112,-32,-37,-119,-21,-110,61,-9,93,-126,-113,-81,28,-76,-109,43,-91,-51,63,0,-86,-90,-14,-39,-2,-2,-127,-122,21,-38,61,-29,-38,-61,-67,-111,1,-6,49,59,-81,-79,-24,-70,41,-8,59,-3,-106,2,54,-40,49,-67,1,-11, 
  /* [24][0][][] */ -66,-21,-78,-55,-65,-95,-64,-57,46,28,52,13,77,22,-27,-66,-59,36,-48,-16,63,-67,-16,-1,29,-63,56,50,56,39,-42,-51,-13,-2,33,-2,-7,-103,28,9,-95,-127,90,23,36,-18,-6,29,-43,-63,-50,-2,49,19,37,-50,-39,65,16,6,77,-3,-11,57,-91,66,-31,-63,-82,65,-38,-23,-23,-21,71,50,57,-10,-56,-38,-45,-97,-59,-112,7,23,-5,-40,16,-81,-13,-41,-36,14,-51,-4, 
  /* [25][0][][] */ -90,-71,-84,-48,25,-78,-62,38,12,-38,-61,-10,17,-29,-109,-50,-101,55,61,-82,24,31,-52,-91,22,-68,-116,-10,21,-97,4,53,42,-109,-13,26,60,-44,-20,-17,-84,47,-127,-24,48,-1,21,-7,-53,34,-36,21,-8,-38,-23,-19,22,-11,-71,25,80,-12,43,0,-26,19,-50,-38,-99,-27,-55,-70,-10,-50,17,1,16,37,-14,-24,-10,15,-56,35,-82,-44,-111,-67,-51,-41,44,-22,-89,-14,-20,-63, 
  /* [26][0][][] */ 17,-127,-46,-37,-104,-28,-32,-36,-118,-119,54,47,-90,-66,-19,-41,67,5,-84,-79,-22,30,49,-17,11,27,-16,6,-16,-26,-99,-26,-57,-76,-107,-108,-80,41,-69,65,-103,54,13,-5,-76,28,-57,57,0,-1,-31,59,-21,-57,-27,-109,55,26,9,-8,-30,-98,53,-42,67,-45,-70,19,-95,43,37,45,37,-102,-99,-27,7,-96,-111,-24,-53,32,34,-98,35,-27,-66,-15,-100,57,-19,-14,-72,68,3,36, 
  /* [27][0][][] */ -18,-26,-78,-108,-118,-80,-78,-44,15,64,0,-48,-51,15,34,-49,28,-37,30,-92,-110,-24,-49,-43,-92,10,-111,-33,24,-5,-50,-34,16,27,-103,-100,-46,-70,-114,45,-94,-10,-7,-14,55,-5,28,58,102,21,23,-84,-97,-91,-28,-53,56,-46,-115,-91,-74,-72,20,19,7,-66,-118,56,11,-16,-127,-25,22,-8,-36,-93,10,-14,36,49,39,-43,66,-34,-87,-90,-50,0,-74,-21,-56,-68,17,-15,113,91, 
  /* [28][0][][] */ 75,32,104,44,-30,-10,-23,28,-33,-28,96,114,-47,-35,4,97,48,76,14,30,-19,13,-52,-49,-34,66,-34,-20,-41,-15,57,14,-83,31,37,82,21,-5,57,23,120,110,-56,49,-79,43,39,63,25,7,50,14,0,37,61,20,54,-1,107,64,-15,-7,-31,37,119,55,7,73,-26,16,-74,9,58,90,33,-38,-69,-70,-37,23,-28,-30,127,26,50,-56,48,-11,-17,64,-4,-20,-5,37,-40,-37, 
  /* [29][0][][] */ 14,17,15,-72,-94,-13,-118,-22,69,-2,-102,-98,62,-117,-70,-69,-107,63,55,-82,-87,-59,16,-22,-55,-5,-64,-54,-114,-35,65,-28,46,-25,-95,-74,-37,66,-34,53,85,80,-72,40,-28,56,-72,-47,-8,-36,28,-12,31,-86,72,13,-73,20,-72,64,-127,57,-88,-67,-75,-81,17,48,53,-99,2,-85,67,45,21,-2,67,-77,-55,-4,-35,-96,-40,-13,23,85,12,38,-56,52,30,39,-116,-13,-23,24, 
  /* [30][0][][] */ -3,-57,-81,1,-88,2,-63,-12,77,-35,-21,-52,-116,-14,24,-10,-29,32,57,-118,7,-107,-114,8,-98,-4,-87,101,-31,-98,-101,-20,-96,-88,-127,-75,12,-44,-27,22,77,-79,-10,82,67,-64,62,27,-62,36,-4,-91,65,-66,-32,66,-79,-50,-71,-53,-106,-22,-82,-36,-122,-89,-109,53,-82,68,11,-55,-95,73,16,-99,-63,-62,-82,-74,-1,-8,-92,-19,-101,-1,-107,71,-41,-103,38,42,-47,-27,0,-89, 
  /* [31][0][][] */ 36,-106,1,54,17,26,-70,-103,-51,-37,-90,-92,52,-127,-66,61,-73,-95,7,15,19,-1,-51,59,8,-115,5,2,-83,-85,15,61,-13,-12,-100,-33,54,-48,-77,-112,32,-77,-53,-2,-23,-73,-56,-3,34,-7,54,-21,-116,-76,-87,-6,-116,30,-22,61,-58,-27,58,-83,33,59,-60,-90,32,-121,-127,-14,-103,-56,-25,-24,-76,-60,9,42,-88,-59,17,104,16,45,-100,-13,-17,-74,-97,-70,-18,55,-23,-49, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0025116035249084234, 0.0022018039599061012, 0.0021735609043389559, 0.0027223059441894293, 0.0026746825315058231, 0.0026820872444659472, 0.0021466349717229605, 0.0021330735180526972, 0.0026152641512453556, 0.0028354732785373926, 0.0025232243351638317, 0.0037537210155278444, 0.0023995020892471075, 0.0026729821693152189, 0.0022543962113559246, 0.0027129845693707466, 0.002199981827288866, 0.00395628297701478, 0.0021568010561168194, 0.0023692052345722914, 0.0019502879586070776, 0.0025816119741648436, 0.0027203231584280729, 0.0022464976646006107, 0.0027779457159340382, 0.0025532480794936419, 0.0022808420471847057, 0.0022804110776633024, 0.0031400525476783514, 0.0021586662624031305, 0.0020766176749020815, 0.0022934721782803535, } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&g0::quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data6[96] = { 951, -401, 2687, 5540, 3477, -1474, 5870, -2106, -2890, -1067, 4894, -1975, 3060, 4222, 919, 1988, -402, -483, -652, 5314, 2398, -1126, 1824, -604, -1474, 4619, 1029, 2433, 6098, 2326, 5209, 782, 1414, 3687, 4973, 2131, -672, 2953, 1763, -3982, 311, 1658, 136, 1457, -1262, 188, -1662, 410, -7708, 2055, 1752, -3652, 4488, -689, 3337, 1204, 773, 1325, -785, -1753, 257, 1354, 240, 4505, 4507, 3281, 2633, 4913, 3137, -955, 2899, 4441, 2271, -1958, 4371, 6892, 206, -3426, 402, 994, 7635, 2503, -617, -1157, 1019, 830, 1001, -3052, 3910, -1011, 2552, 572, -133, -3284, 354, 1110, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00014537261449731886, 0.00014510919572785497, 0.0001599467359483242, 0.00013215311628300697, 0.00017962773563340306, 0.0002622124447952956, 9.9940967629663646e-05, 0.00015658730990253389, 0.00014965716400183737, 0.00018047515186481178, 0.00013491236313711852, 0.00020815075549762696, 0.00016452565614599735, 0.00014641440066043288, 0.00027339492226019502, 0.00024386620498262346, 0.00027177462470717728, 0.00019188705482520163, 0.00019453151617199183, 0.00011606543557718396, 0.00017441675299778581, 0.00017714851128403097, 0.00016385334311053157, 0.00022536756296176463, 0.00020940021204296499, 0.00013673280773218721, 0.00017949863104149699, 0.00014478877710644156, 0.00012105410860385746, 0.00016714955563656986, 9.8526856163516641e-05, 0.00022375774278771132, 0.00018164435459766537, 0.00016378330474253744, 0.00013471354031935334, 0.00022796465782448649, 0.00022597277711611241, 0.00015909336798358709, 0.00017660678713582456, 0.00014427653513848782, 0.00018622269271872938, 0.00015112485561985523, 0.00026251532835885882, 0.00014969935000408441, 0.00016348998178727925, 0.00011742132483050227, 0.00019541065557859838, 0.00015904963947832584, 0.00010019147885031998, 0.00013820100866723806, 0.0002144625032087788, 0.00015051777882035822, 0.00014079765242058784, 0.00028957281028851867, 0.0001369744713883847, 0.0001514902978669852, 0.00016539625357836485, 0.00018844244186766446, 0.00026200973661616445, 0.00019349181093275547, 0.0002738207986112684, 0.00014221585297491401, 0.00030093517852947116, 0.00012043577589793131, 0.00014120012929197401, 0.00011138588888570666, 0.00019237755623180419, 0.00012497004354372621, 0.00020635049440898001, 0.00015170530241448432, 0.00016056052118074149, 0.00014604481111746281, 0.00015812214405741543, 0.00015100189193617553, 0.00015469362551812083, 0.00011186176561750472, 0.00013633088383357972, 0.00016474786389153451, 0.00019762209558393806, 0.0001545626437291503, 0.00010376830323366448, 0.00012708394206129014, 0.00022515645832754672, 0.00022537658514920622, 0.00018245635146740824, 0.00014140312850940973, 0.00024257510085590184, 0.00015795859508216381, 0.00015301602252293378, 0.00019189395243301988, 0.00019463720673229545, 0.00024976080749183893, 0.00018188016838394105, 0.000137231734697707, 0.0003336181107442826, 0.00020083019626326859, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -1,99,-99,65,48,-59,89,94,-28,3,-2,-127,102,100,-54,32, 
  /* [1][0][][] */ -26,2,-93,-9,1,66,26,-127,22,-45,-36,-79,-9,-30,-75,-16, 
  /* [2][0][][] */ 11,2,42,73,0,8,-110,127,-4,10,38,-59,15,-64,-14,42, 
  /* [3][0][][] */ 95,-62,76,9,0,-11,-44,127,-9,67,42,26,9,60,24,-4, 
  /* [4][0][][] */ -50,-29,11,31,-85,0,-23,-127,-4,-20,49,6,20,34,102,113, 
  /* [5][0][][] */ 105,10,-37,-7,-66,20,29,82,14,-4,50,72,127,-4,-93,18, 
  /* [6][0][][] */ 26,-56,-93,-33,-83,27,-33,-31,-84,-48,-46,12,119,76,127,-3, 
  /* [7][0][][] */ -43,56,-15,-99,-15,-47,-104,0,-114,64,-91,-90,-127,-38,37,86, 
  /* [8][0][][] */ 43,32,65,18,64,12,69,23,80,-30,34,9,-127,-48,-80,8, 
  /* [9][0][][] */ -33,75,45,-52,-59,-22,20,-4,-19,69,-73,-4,65,127,49,56, 
  /* [10][0][][] */ 77,66,-17,36,-61,-47,63,-65,-47,-44,-69,-94,-127,-104,39,119, 
  /* [11][0][][] */ 39,-5,54,25,3,-36,-8,124,-72,37,-21,15,6,-19,59,127, 
  /* [12][0][][] */ -68,-40,-2,27,73,13,127,52,-51,17,-3,-20,-35,80,-64,75, 
  /* [13][0][][] */ 3,18,0,111,107,8,113,127,20,64,-120,-108,39,19,-112,-28, 
  /* [14][0][][] */ -81,127,14,-8,-18,23,48,13,-43,45,91,-26,-78,43,-18,26, 
  /* [15][0][][] */ -11,-9,-127,-47,53,-38,-71,-29,-31,-10,-7,-63,7,-64,-55,60, 
  /* [16][0][][] */ 84,-21,-9,-24,22,-37,46,-37,-20,6,127,54,48,-12,-47,29, 
  /* [17][0][][] */ 4,16,-28,-88,-17,-101,127,-114,-9,-32,-39,52,39,63,0,69, 
  /* [18][0][][] */ 4,97,-9,-71,94,-55,37,-90,-30,127,-40,-6,-35,47,-71,-32, 
  /* [19][0][][] */ -76,-117,93,-45,47,-127,30,-8,27,32,92,107,44,-37,49,-15, 
  /* [20][0][][] */ -31,65,39,1,17,-11,27,-25,60,-20,93,-9,-127,-39,-76,1, 
  /* [21][0][][] */ -28,62,33,-14,40,25,48,53,-127,79,-67,30,-24,46,-37,-36, 
  /* [22][0][][] */ 9,-85,53,11,13,-127,89,5,16,-45,-38,-48,38,-84,-31,-58, 
  /* [23][0][][] */ -83,-127,52,60,70,-25,19,-60,36,-39,56,21,-15,50,51,116, 
  /* [24][0][][] */ 18,13,14,94,41,-4,-60,-127,89,30,-59,-1,20,-18,-10,-31, 
  /* [25][0][][] */ -22,30,9,-42,-15,-25,2,-9,-36,75,-48,-27,50,127,18,10, 
  /* [26][0][][] */ -71,92,17,11,30,-90,-11,-46,20,15,26,77,3,14,-95,127, 
  /* [27][0][][] */ -34,-127,-51,22,-38,65,2,-40,12,-25,47,-25,15,-47,-92,-13, 
  /* [28][0][][] */ -27,10,48,89,1,17,-53,-127,-116,55,105,-14,62,28,-30,-42, 
  /* [29][0][][] */ -127,100,-33,-9,-12,33,-126,-53,-33,-33,-3,-18,4,-55,-114,38, 
  /* [30][0][][] */ 72,93,-31,56,-125,-79,-89,-27,-16,12,-12,-127,108,53,13,75, 
  /* [31][0][][] */ 127,41,-41,-13,-81,33,72,52,-40,1,43,29,55,34,-6,-7, 
  /* [32][0][][] */ -52,-40,127,30,-17,82,84,49,-40,-13,2,37,1,105,59,38, 
  /* [33][0][][] */ -7,7,-101,-40,-12,-12,127,47,-5,-32,-18,-61,99,92,-61,75, 
  /* [34][0][][] */ -117,-43,76,19,24,-85,120,19,-127,22,46,-24,56,37,-68,-19, 
  /* [35][0][][] */ 0,19,-48,42,-50,48,-60,25,15,127,10,75,-45,66,22,13, 
  /* [36][0][][] */ -24,-85,127,-34,-32,36,-69,5,21,37,-37,72,0,-65,-49,60, 
  /* [37][0][][] */ 56,-22,65,1,100,-86,-56,69,-5,127,-53,-1,-95,-38,78,-18, 
  /* [38][0][][] */ 52,48,-3,-64,8,-21,-101,63,-45,64,-127,-64,-44,-81,-108,32, 
  /* [39][0][][] */ -72,44,-51,-52,-98,-114,114,-2,-127,-59,11,110,26,-16,13,40, 
  /* [40][0][][] */ 85,-3,-6,-127,-63,55,46,-34,-63,-69,-13,-58,-11,62,-2,84, 
  /* [41][0][][] */ 86,-84,-43,-29,2,-37,-111,-15,104,-15,52,-51,127,-100,90,-4, 
  /* [42][0][][] */ -40,-127,-15,122,5,-115,-105,-1,13,-2,31,78,-105,62,-67,18, 
  /* [43][0][][] */ -75,-30,-26,-127,-63,-8,-5,54,45,-125,-37,48,-25,-59,-16,89, 
  /* [44][0][][] */ -53,34,34,-56,-31,-53,53,105,104,-90,76,127,113,33,-31,16, 
  /* [45][0][][] */ 53,96,-52,70,100,-87,-60,-89,127,-69,54,-80,-28,-16,-53,46, 
  /* [46][0][][] */ -5,-14,23,-23,93,-29,32,-1,0,127,-35,-98,33,78,-27,51, 
  /* [47][0][][] */ 73,-54,-23,-15,85,-27,-43,-80,13,117,-50,28,-28,-127,-79,4, 
  /* [48][0][][] */ 23,38,1,-127,10,-31,86,-121,21,17,-49,30,60,70,17,22, 
  /* [49][0][][] */ 1,127,-34,13,23,-54,46,28,-2,36,12,-44,-18,54,119,-89, 
  /* [50][0][][] */ 20,47,-33,9,-127,32,-84,-107,58,78,25,27,-50,-40,6,30, 
  /* [51][0][][] */ 127,-16,-43,-19,-41,68,-91,-28,58,-26,-27,62,-10,-58,9,41, 
  /* [52][0][][] */ 1,-24,58,77,-62,-70,-127,35,-19,-19,-54,-80,-3,-32,36,41, 
  /* [53][0][][] */ 19,78,31,-78,11,81,76,6,-1,-26,-13,-62,84,-127,0,55, 
  /* [54][0][][] */ 25,122,18,-32,2,-89,-77,24,-9,-44,-46,127,82,81,20,49, 
  /* [55][0][][] */ -16,7,64,4,27,-7,74,92,-110,16,1,-10,127,66,14,-17, 
  /* [56][0][][] */ 127,26,1,42,-62,98,-77,-52,-22,67,-77,-10,-56,99,5,42, 
  /* [57][0][][] */ -12,-10,-20,-45,-64,-127,25,-25,-98,-24,36,55,28,22,24,15, 
  /* [58][0][][] */ 55,-36,63,26,2,-46,-27,4,27,-1,-127,-37,29,-22,-23,31, 
  /* [59][0][][] */ 62,6,-127,96,20,40,65,-14,-44,-39,15,-100,-98,-44,14,77, 
  /* [60][0][][] */ -18,12,-14,14,9,-28,-10,-17,-45,-58,67,127,-36,-98,-43,4, 
  /* [61][0][][] */ -6,50,114,-120,-120,86,-16,124,-51,-127,32,66,96,34,52,109, 
  /* [62][0][][] */ 66,49,7,-127,-21,-26,-3,-35,-7,29,-32,61,29,-39,-85,-69, 
  /* [63][0][][] */ 2,-16,19,-18,-75,-93,-77,-7,-65,-20,-56,-1,127,-16,77,-40, 
  /* [64][0][][] */ 44,22,4,19,-111,-8,-39,-95,66,127,20,-17,16,-22,-16,78, 
  /* [65][0][][] */ -44,-13,-15,-27,-93,74,17,-45,77,-127,100,-57,48,50,-97,74, 
  /* [66][0][][] */ -127,43,-102,-53,57,-6,-114,-38,-111,116,105,-18,-93,-30,8,55, 
  /* [67][0][][] */ 20,-19,-121,-127,52,89,-11,-43,-40,-13,40,-14,32,54,35,40, 
  /* [68][0][][] */ 75,45,6,-67,-88,35,27,23,-91,64,127,6,-14,-20,-113,-7, 
  /* [69][0][][] */ 65,-90,35,-58,8,-127,-12,113,2,48,81,88,-13,57,-20,9, 
  /* [70][0][][] */ 24,-15,122,22,94,-39,127,1,3,5,-40,59,-49,34,-75,49, 
  /* [71][0][][] */ 14,38,107,-59,-127,-68,3,24,-17,-2,3,-116,-81,15,13,17, 
  /* [72][0][][] */ -47,-82,30,-107,83,-15,-20,40,-48,24,-127,-29,40,102,-35,78, 
  /* [73][0][][] */ 5,5,31,3,127,-101,-52,19,-31,99,-67,45,-82,-43,107,-4, 
  /* [74][0][][] */ -114,-24,-127,-39,101,-23,-36,32,-48,10,-100,-29,-40,-51,-42,67, 
  /* [75][0][][] */ 82,-25,31,-10,30,2,-127,-2,-1,-78,55,-8,11,-8,-4,-16, 
  /* [76][0][][] */ 34,-28,-8,127,70,109,87,-32,113,-103,57,89,79,-74,-32,20, 
  /* [77][0][][] */ -60,-54,127,-16,42,-57,-13,-96,9,-2,53,113,32,40,1,18, 
  /* [78][0][][] */ -58,-15,-1,-6,18,-56,31,3,21,-11,19,-85,-80,-64,-127,-37, 
  /* [79][0][][] */ -127,-113,-43,56,115,5,-31,24,14,21,-17,57,-45,-113,-66,1, 
  /* [80][0][][] */ -5,-127,95,126,-23,-68,-110,78,-3,18,73,24,-58,-40,-15,87, 
  /* [81][0][][] */ 85,37,-31,91,4,23,13,127,10,17,110,55,110,12,41,-1, 
  /* [82][0][][] */ -33,21,26,-46,16,-119,-127,-100,15,69,-57,-44,-19,95,-57,-36, 
  /* [83][0][][] */ 91,-18,38,-36,-56,3,-111,-11,8,-127,17,-42,-15,22,2,-19, 
  /* [84][0][][] */ 7,-82,-127,37,87,58,60,35,-68,20,-99,-47,35,-22,-81,18, 
  /* [85][0][][] */ -13,66,34,-37,64,-58,64,-65,127,-52,41,6,112,-108,-5,8, 
  /* [86][0][][] */ 111,-25,127,29,-12,-70,81,24,-56,-55,-72,-31,34,8,-48,21, 
  /* [87][0][][] */ 14,28,35,-67,91,-21,-65,3,48,-21,62,-52,-100,-127,11,10, 
  /* [88][0][][] */ -67,-43,39,14,38,12,-73,-30,1,24,-75,-127,-42,-58,-23,-12, 
  /* [89][0][][] */ -54,48,47,-82,5,-12,-127,22,88,21,-97,-33,-2,-105,-23,-49, 
  /* [90][0][][] */ -5,-8,-20,-79,127,19,-68,32,61,59,11,-23,20,18,-47,-39, 
  /* [91][0][][] */ -37,-47,42,20,-48,-29,0,30,-45,-59,52,-12,-10,29,19,127, 
  /* [92][0][][] */ -7,86,19,-12,-49,45,-79,58,-37,-15,35,-25,-16,127,56,43, 
  /* [93][0][][] */ 5,105,-83,-78,61,88,-104,-1,57,66,108,41,-127,37,-32,87, 
  /* [94][0][][] */ 20,67,127,18,-91,-20,15,-11,11,-42,44,-35,-58,-13,-6,-26, 
  /* [95][0][][] */ -30,-9,66,-1,127,0,-54,48,14,-1,-26,80,-15,19,44,-40, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.0013989328872412443, 0.0013963980600237846, 0.0015391809865832329, 0.0012717206263914704, 0.0017285728827118874, 0.0025232925545424223, 0.00096174032660201192, 0.0015068529173731804, 0.0014401634689420462, 0.0017367276595905423, 0.0012982729822397232, 0.0020030522719025612, 0.0015832443023100495, 0.0014089581090956926, 0.0026309024542570114, 0.0023467449937015772, 0.0026153100188821554, 0.0018465452594682574, 0.0018719931831583381, 0.0011169074568897486, 0.001678427099250257, 0.0017047150759026408, 0.0015767745207995176, 0.002168731065467, 0.0020150758791714907, 0.001315791392698884, 0.0017273304983973503, 0.0013933145673945546, 0.0011649138759821653, 0.0016084942035377026, 0.00094813224859535694, 0.0021532396785914898, 0.0017479789676144719, 0.0015761005925014615, 0.0012963598128408194, 0.0021937231067568064, 0.0021745550911873579, 0.0015309689333662391, 0.0016995019977912307, 0.0013883853098377585, 0.0017920366954058409, 0.0014542872086167336, 0.0025262071285396814, 0.0014405694091692567, 0.0015732778701931238, 0.0011299552861601114, 0.0018804532010108232, 0.0015305480919778347, 0.00096415105508640409, 0.0013299199054017663, 0.0020637908019125462, 0.0014484452549368143, 0.0013549076393246651, 0.0027865834999829531, 0.0013181169051676989, 0.0014578038826584816, 0.0015916221309453249, 0.0018133975099772215, 0.0025213418994098902, 0.001861987984739244, 0.0026350007392466068, 0.0013685551239177585, 0.0028959244955331087, 0.001158963656052947, 0.0013587807770818472, 0.0010718757985159755, 0.0018512654351070523, 0.0012025972828269005, 0.0019857282750308514, 0.0014598729321733117, 0.0015450874343514442, 0.0014054015045985579, 0.0015216227620840073, 0.0014531039632856846, 0.0014886298449710011, 0.0010764552280306816, 0.0013119236100465059, 0.0015853826189413667, 0.0019017340382561088, 0.0014873692998662591, 0.00099857116583734751, 0.0012229394633322954, 0.00216669961810112, 0.0021688179112970829, 0.0017557928804308176, 0.0013607342261821032, 0.0023343206848949194, 0.0015200489433482289, 0.0014724860666319728, 0.0018466117326170206, 0.00187301030382514, 0.0024034692905843258, 0.0017502482514828444, 0.0013205925934016705, 0.0032104351557791233, 0.0019326058682054281, } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data8[16] = { 3339, 4745, -505, 4253, 8092, 10251, 14876, -6031, 17095, -10657, -3430, 2383, -18847, 7919, -2950, 11490, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 6.0341586504364386e-05, 7.8316625149454921e-05, 4.3200696381973103e-05, 6.070486779208295e-05, 5.9610381867969409e-05, 4.2269126424798742e-05, 6.6732725827023387e-05, 4.2142641177633777e-05, 6.3180894358083606e-05, 6.2295308453030884e-05, 4.8127902118721977e-05, 4.7583420382579789e-05, 4.8756166506791487e-05, 5.6098895584000275e-05, 5.3624509746441618e-05, 7.2592338256072253e-05, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -98,15,48,-43,-55,-27,-81,20,-18,-5,1,-39,10,62,23,-47,0,21,53,16,33,-52,127,64,38,9,-7,46,-55,-108,-56,-29,-32,-33,28,6,9,34,25,40,-28,-6,-106,-9,-55,-3,-2,77,15,25,-29,-7,-24,33,66,-19,-118,9,0,96,73,11,15,3,-12,-54,-40,32,-12,-53,-8,-1,3,0,-52,-46,-44,27,-15,3,-47,34,96,-50,55,31,12,50,19,-4,-12,-47,6,-28,-68,-7, 
  /* [1][0][][] */ 36,-4,48,-59,-33,-36,-41,2,23,16,57,-39,-11,8,-76,-49,-27,2,-89,71,11,-88,52,79,-10,-71,6,-29,55,-100,114,-102,69,10,-30,52,51,89,23,-38,31,32,-48,-26,-7,78,-127,-36,0,-44,4,0,17,-44,-15,78,2,17,-28,52,48,42,27,-80,23,-7,-71,15,19,7,-97,12,-40,-18,17,-80,-1,15,25,-59,-20,-27,-54,-11,85,-32,-4,18,-52,-30,-73,10,33,74,-75,39, 
  /* [2][0][][] */ 71,-10,29,-2,49,-97,78,30,-13,-1,-32,5,-106,-42,19,-50,-106,-32,-36,51,-7,-40,-41,25,-32,-62,8,-47,-20,48,-38,80,-67,122,-16,3,-21,-20,-34,34,-127,64,64,32,-53,-9,-15,-34,22,-13,-61,-66,44,-2,0,41,22,-25,55,-11,-4,39,-33,16,62,10,10,20,47,56,-28,-6,40,41,59,37,39,-55,81,32,90,-19,-52,39,-82,8,22,84,9,-11,-35,25,-32,40,-10,28, 
  /* [3][0][][] */ -13,-16,-32,10,-4,-9,20,-60,-34,58,40,71,61,-21,-78,29,4,-28,40,1,-2,127,14,-55,8,48,-25,3,44,-22,70,-10,-20,23,-10,-32,7,16,29,17,-77,-27,-9,13,-25,29,18,-6,-36,-49,9,-37,45,-77,-54,-33,9,101,-3,-20,-14,-20,-46,13,1,14,-22,6,-13,-10,22,-64,-28,-54,37,11,31,7,-27,-20,-15,-23,-84,13,-24,-49,23,-4,-20,35,30,-7,55,17,-23,64, 
  /* [4][0][][] */ 23,19,-36,25,6,14,-48,-12,-40,75,88,-8,-15,-3,-8,-50,39,-17,-22,19,17,-49,7,61,-62,8,-127,15,-36,-69,16,24,-53,-51,26,44,16,2,17,-10,-10,-28,44,-42,-19,4,-33,17,-61,42,1,11,50,-50,-77,-21,37,-22,7,-19,11,-17,23,-1,-59,-12,-31,6,-69,12,-28,27,20,-54,-39,-25,32,-67,-15,5,-42,68,-87,1,-21,36,24,-68,60,11,32,7,-54,-39,38,31, 
  /* [5][0][][] */ -84,62,71,16,23,-15,80,-75,11,17,-27,-14,56,-38,-10,-28,25,-37,68,26,-109,7,-89,64,-30,-10,34,38,73,-65,0,66,35,123,7,48,11,1,20,-45,-6,117,58,-41,-20,43,34,0,17,-7,-9,56,36,-56,42,-127,50,-44,-67,-55,47,83,-48,8,94,-51,-94,-93,-88,-40,-47,-24,-56,2,-11,-64,30,-56,-64,-19,111,-60,5,-71,-98,55,8,-48,-31,34,-4,-21,5,18,32,116, 
  /* [6][0][][] */ 27,-16,-76,22,-15,-88,70,76,-71,47,-23,50,-98,-87,53,20,12,-54,-22,-15,-32,3,-75,-80,-59,33,46,-1,22,18,89,-59,18,-10,11,-78,-5,-27,3,72,3,-3,-54,1,-2,-65,-73,-4,-15,-109,-53,47,47,19,-37,-80,51,16,-7,-21,-127,24,-85,-1,-3,-5,15,45,39,12,6,-53,-48,21,70,28,65,-17,35,-57,-19,-52,-91,63,-27,-28,19,20,-54,38,24,66,-40,-4,-18,79, 
  /* [7][0][][] */ 24,71,-69,-80,-19,13,24,37,-67,38,-30,-42,-27,31,-19,-24,-81,-29,-45,85,-23,123,36,35,24,0,64,29,36,49,46,-9,85,50,-12,30,-16,11,16,47,-103,-16,37,-88,39,-34,88,-14,34,-69,-61,-51,-74,31,-3,3,30,6,-95,-16,30,127,-11,-7,-28,14,-44,45,-21,8,-97,68,40,69,-41,53,-68,86,50,-103,-3,-51,91,-108,80,-33,-11,19,-15,73,-82,52,43,-20,-58,2, 
  /* [8][0][][] */ -24,57,-31,39,-12,-43,-97,34,-100,-39,-1,-7,-56,44,39,65,6,-23,-10,-4,45,-26,-10,-26,-59,63,-20,36,-11,-26,-17,-33,-28,-47,-12,-77,-57,19,41,27,9,-33,34,-5,-25,-40,-1,-23,-32,-1,38,83,1,1,-49,97,-52,11,6,-15,-45,-7,47,41,-47,-73,-21,-14,-13,-7,17,2,-17,-56,-118,-28,-29,36,-70,-35,-33,22,-46,-17,-6,-27,7,40,14,44,-57,-33,-63,-127,15,-48, 
  /* [9][0][][] */ -22,48,-89,66,-67,-40,78,63,8,75,4,125,-14,3,-8,124,4,0,75,20,2,11,69,-94,-4,10,52,7,18,-35,37,67,-32,1,-11,-122,23,-9,-6,-23,-39,48,20,-43,-20,19,28,12,53,126,51,9,-81,-115,-13,2,11,14,106,-32,-59,91,-61,-37,127,8,-44,23,-110,49,33,69,-40,118,-55,-4,-49,17,-58,5,74,-55,95,-10,77,-33,17,-60,-29,50,15,-13,78,59,-61,-9, 
  /* [10][0][][] */ 51,-14,-56,-16,3,-24,48,17,-15,2,-17,-19,-97,-13,7,-23,-80,-16,6,2,21,18,33,-5,-52,58,25,-27,-69,-80,-18,-30,56,-36,46,-15,52,-77,80,127,-4,-68,19,12,-8,-57,-4,43,8,67,-70,-51,-37,38,4,52,6,-54,52,35,-3,62,-65,-29,-11,-35,31,59,36,-47,-1,61,119,15,33,-70,29,-30,57,-5,-25,31,28,10,-31,-26,1,57,-53,-31,9,52,31,52,-38,-3, 
  /* [11][0][][] */ -36,-18,50,-72,32,-14,-4,-11,51,-29,-33,4,-18,-22,17,27,-105,13,80,35,-65,11,-58,-67,-6,-20,-20,40,18,-37,19,-49,20,15,29,-44,-56,19,-90,31,-66,42,-25,48,43,-1,3,-16,22,-82,-35,-70,13,43,89,-55,-29,-54,29,-34,-36,-36,-42,-96,-7,-39,73,68,127,20,93,-31,0,-32,78,-51,97,41,53,34,50,5,-20,72,47,6,17,4,-63,-107,-26,21,64,54,68,87, 
  /* [12][0][][] */ 43,-48,-19,-79,21,114,-34,58,38,64,25,41,23,59,9,-3,-94,54,-5,59,108,-12,74,-61,60,42,-63,-81,-36,60,-17,-38,54,-19,-6,-20,32,22,-19,-15,-1,-23,13,71,-5,47,24,-8,-56,39,-15,3,-51,-11,3,52,-22,69,3,55,62,-80,26,-105,23,104,-36,-12,15,-17,39,16,-12,40,-24,58,-38,61,-35,0,-26,29,127,3,-4,69,-33,-59,64,38,-62,52,64,28,-45,-117, 
  /* [13][0][][] */ -18,7,-30,-69,-11,-7,-9,-12,9,-1,-9,-71,38,-71,-32,-73,-36,-17,-83,-22,-90,-37,30,69,-11,-11,92,-11,0,-47,48,22,38,-20,-98,127,-38,-33,32,-33,73,-19,-24,14,9,-62,74,-35,61,6,-52,5,-3,12,-5,75,61,-50,-35,-14,73,40,-7,-85,1,35,-19,49,-39,-27,-81,29,-40,11,-44,-60,-90,38,43,72,-35,41,56,-95,38,26,20,9,-21,-14,2,22,-56,10,-42,-24, 
  /* [14][0][][] */ -4,27,-70,-49,74,83,-67,4,31,-43,77,16,16,-11,-49,-58,-76,11,34,127,6,-16,27,6,7,48,-19,58,7,2,-39,-13,66,-6,-31,8,-17,65,74,23,37,-16,22,-17,-11,-22,50,-21,24,3,10,-28,19,13,-16,27,-6,60,-71,-4,7,-51,-46,-83,4,1,-60,10,-52,61,-11,41,10,-16,-20,-28,15,-10,-27,-25,11,-8,18,-20,-1,42,-4,-23,-26,75,55,-3,25,-31,-45,-55, 
  /* [15][0][][] */ -69,-44,12,-47,11,-4,-36,-54,-33,20,4,42,-2,-2,31,68,-93,-26,12,-81,9,-38,-18,-94,46,-24,48,-62,-65,-79,-74,46,-11,54,57,-53,-19,-32,25,-11,-27,-12,51,-9,16,17,61,93,-60,6,10,-52,-39,41,-2,-26,-53,-21,51,-17,-24,17,-90,11,-71,-1,-3,29,41,-68,57,-28,55,-51,-18,-22,4,30,45,-5,-6,89,55,1,-5,-12,-127,22,-22,-56,-44,50,8,-29,-20,40, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.0025645173154771328, 0.0033284565433859825, 0.0018360295798629522, 0.0025799567811191082, 0.0025334411766380072, 0.0017964377766475081, 0.0028361408039927483, 0.0017910621827468276, 0.0026851878501474857, 0.0026475505437701941, 0.002045435830950737, 0.0020222952589392662, 0.0020721370819956064, 0.0023842030204832554, 0.0022790415678173304, 0.0030851743649691343, } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data10[96] = { -6524, 3589, -3169, -5458, -1179, -2780, -4244, -217, -8527, -10912, 9951, -1752, 542, 6585, 14016, -1939, 19752, 76, -4068, 854, -7643, -304, -229, -2554, 127, -7534, -4002, -3230, -5198, -9992, 828, -1444, 9001, -6709, -1364, -902, 5616, -934, 592, 7057, 450, -4228, 4845, -7750, 10891, 8551, 5067, 9300, 665, 5491, 8412, -5968, 838, 9748, -1059, 10151, -679, 2185, 3913, 5651, 11684, 15880, 1043, -12091, -1863, -1886, -1989, 15291, 857, -2021, 5926, -1082, 21648, -519, -684, 5859, -2353, -212, 11447, -743, 4908, 14885, -6, 3336, 15347, -598, -5225, -1791, 10804, -11527, 8805, -855, 944, 4127, -5905, -4014, };
const TfArray<96, float> quant10_scale = { 96, { 0.00021088100038468838, 0.00012657992192544043, 9.5680159574840218e-05, 9.9960030638612807e-05, 0.00026037290808744729, 0.00030046410392969847, 0.0003143691283185035, 0.00019975239410996437, 9.1045527369715273e-05, 0.00014385947724804282, 7.6912634540349245e-05, 0.00040750557673163712, 0.00021653789735864848, 0.00013873790157958865, 0.0001028953556669876, 0.00019777087436523288, 0.00011845096742035821, 0.00025424486375413835, 0.00011996272223768756, 0.00010195287904934958, 0.00014719909813720733, 0.00033075839746743441, 0.00027946277987211943, 0.00017443348770029843, 0.00031906942604109645, 0.0001162070402642712, 0.00022797644487582147, 0.0001330398372374475, 0.00017550009943079203, 8.968789188656956e-05, 0.00028131055296398699, 0.00023745806538499892, 0.00017995537200476974, 0.00012511642125900835, 0.0001872460707090795, 0.00027758660144172609, 8.5854902863502502e-05, 0.00028363242745399475, 0.00030069411150179803, 9.4248054665513337e-05, 0.00014819105854257941, 0.00015995887224562466, 0.00018050368817057461, 0.00011630541121121496, 0.00011621022713370621, 0.00012170830450486392, 0.00016940302157308906, 0.00010497849143575877, 0.00018626921519171447, 0.00010917369945673272, 0.00010877817840082571, 8.6259155068546534e-05, 0.0001756272540660575, 8.5583516920451075e-05, 0.00023283339396584779, 0.00015258406347129494, 0.00019085929670836776, 0.00016517846961505711, 0.00013236606901045889, 0.0001066221811925061, 9.3713519163429737e-05, 0.00013195365318097174, 0.00012553944543469697, 7.2735223511699587e-05, 0.00019560843065846711, 0.00015519739827141166, 0.00025900403852574527, 8.4585808508563787e-05, 0.00025046200607903302, 0.00015292316675186157, 0.00017791819118428975, 0.00014117869432084262, 6.1735758208669722e-05, 0.00022109373821876943, 0.00033193005947396159, 0.00015529194206465036, 9.7379612270742655e-05, 0.00015687452105339617, 0.00011596813419600949, 0.00018377273227088153, 0.0001661681744735688, 9.4845236162655056e-05, 0.00021820787515025586, 0.00012169675756013021, 0.00010961657244479284, 0.00012256531044840813, 0.00015484093455597758, 0.00020666903583332896, 0.00014847866259515285, 8.2897437096107751e-05, 9.9535041954368353e-05, 0.00019189777958672494, 0.00019900327606592327, 0.00026000037905760109, 6.4629268308635801e-05, 0.00023225738550536335, } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ 30,58,37,51,-35,28,57,42,127,-11,-42,3,-25,24,14,-59,-127,44,1,113,59,45,63,127,13,-21,-30,-2,35,34,46,-26,-105,34,-42,35,-36,82,-3,-3,27,-20,-22,31,-63,-25,-12,-25,-38,-68,8,26,-3,72,25,-23,-68,-70,-49,-127,-106,-27,-106,23,-33,67,36,-52,-33,74,39,-9,-127,41,46,35,50,-56,-98,18,-16,-64,53,-17,-43,-60,36,50,-127,3,-96,22,62,-21,40,-1, -24,-55,6,69,-6,118,-15,-13,121,51,-69,24,-54,-62,-127,127,-107,95,58,92,127,25,102,108,55,-3,29,39,19,112,-22,-127,83,126,11,73,27,127,-64,-127,127,26,81,127,-22,-16,127,-70,3,-49,-15,3,-20,87,-14,-127,10,-3,-52,-31,-116,-127,-13,127,-31,113,36,-64,1,127,84,10,-71,22,-32,-60,73,-73,-70,127,-33,-29,127,-41,-64,-46,70,87,54,83,-57,-7,127,-54,69,18, 11,-104,35,42,-15,20,0,27,110,69,12,33,-28,62,16,-77,-87,43,-4,63,55,45,66,103,57,-12,36,38,53,29,-14,-41,-15,-56,-33,10,-35,80,4,20,0,47,-34,96,-18,45,-15,18,24,-78,11,41,5,-69,-23,34,50,-87,0,-63,-90,-6,-74,16,53,9,-64,-43,-18,21,23,-36,-64,-52,-10,-1,31,-39,-54,23,-6,-127,74,-20,-54,-32,-7,-13,-113,-18,10,31,-2,26,73,15, 
  /* [0][1][][] */ 127,-41,59,127,17,-38,127,40,21,-69,-56,127,-1,-127,-64,-38,-21,-50,78,54,-57,-2,-127,-28,-18,95,-110,127,-55,127,111,97,61,97,11,113,-127,2,-14,-54,59,-110,-3,43,-127,-81,-3,-24,-127,-127,-127,43,127,-81,79,11,-127,13,-22,16,-40,-83,-48,60,-98,-15,86,-127,-91,70,-43,-87,-109,71,127,-25,127,81,-127,-31,127,-80,-43,97,-93,4,38,111,-34,73,-50,38,2,-112,125,5, -110,-20,-103,98,-97,-127,-104,-127,74,42,-126,36,-87,-93,-21,60,-124,-127,127,102,50,-127,-89,123,-127,127,-7,44,-43,-46,-127,100,-75,127,127,-7,-10,57,127,-104,-39,48,-1,18,-1,-127,-95,-127,-10,-49,-49,127,67,72,33,-46,16,3,127,-32,-75,-42,-98,87,-9,-127,127,93,10,69,-127,-46,-75,54,-98,-127,68,127,46,-21,-118,-27,-126,49,-122,-93,127,127,76,127,-127,-127,-76,-81,127,127, 87,-34,127,91,5,-13,34,14,-13,127,-127,32,3,49,-83,47,31,-45,35,7,-63,1,-53,-94,-4,48,127,-36,127,70,14,-92,22,-105,-20,127,-124,-45,-44,-30,-17,127,-1,66,-21,31,-32,-45,108,-45,-80,8,45,-127,-127,40,101,-27,-112,46,-76,-47,50,74,127,-49,-6,-54,-62,14,-36,-42,-107,-127,-16,-34,32,-13,-111,-60,-103,-55,-15,127,-95,3,-34,-27,-49,-29,4,39,-11,127,85,15, 
  /* [0][2][][] */ 60,-127,101,37,20,45,43,86,8,-54,-26,0,23,-30,-37,-1,-88,18,5,89,0,37,-1,49,42,126,-2,-38,10,58,23,43,-16,15,-28,18,-6,-10,-7,-18,-17,38,-20,8,-13,-7,-28,27,-26,95,-40,31,-53,-66,-5,-9,-24,-14,73,21,27,-20,109,40,-22,54,-40,-70,11,38,-22,96,-82,40,13,23,-17,-52,26,4,-16,-32,-21,-70,-98,71,-43,-59,-93,125,27,59,-32,-13,60,4, -26,-4,120,-32,127,82,-13,12,-65,36,-68,-47,127,-33,-107,-1,55,40,-34,-127,5,5,64,-5,93,-88,11,21,32,92,-7,52,-127,59,6,-13,21,27,21,-122,-27,21,-127,54,0,-36,-62,-58,-9,-17,-21,63,24,-123,17,-90,-8,127,33,19,127,-70,127,26,-16,40,-32,-26,127,5,-39,127,-105,7,-19,-52,18,-60,8,-45,-37,-74,-80,-64,42,127,35,-36,50,103,76,59,-54,-31,21,-12, 37,60,33,-4,9,-4,5,43,56,69,27,11,19,53,-88,-15,14,-6,15,64,20,18,-15,-46,26,100,30,30,24,32,-33,-41,-41,-1,-24,7,2,-91,-17,8,-28,35,-8,64,-47,36,-43,2,46,37,-63,36,-43,-86,-27,13,16,-12,45,117,-9,-17,93,22,49,32,-49,-35,12,7,-11,120,-19,4,-20,39,14,0,7,2,-30,-40,-1,-18,127,36,-36,-64,-92,100,55,40,-36,-4,-12,-7, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.010342704132199287, 0.0062081399373710155, 0.004692654125392437, 0.0049025611951947212, 0.012770045548677444, 0.014736327342689037, 0.015418302267789841, 0.0097968997433781624, 0.0044653476215898991, 0.007055619265884161, 0.0037721968255937099, 0.019986199215054512, 0.010620147921144962, 0.0068044303916394711, 0.0050465250387787819, 0.0096997153013944626, 0.0058094533160328865, 0.01246949378401041, 0.005883597768843174, 0.0050003011710941792, 0.0072194114327430725, 0.016222117468714714, 0.013706312514841557, 0.008555128239095211, 0.015648828819394112, 0.0056993993930518627, 0.011181154288351536, 0.0065249679610133171, 0.0086074406281113625, 0.0043987622484564781, 0.01379693765193224, 0.011646182276308537, 0.0088259503245353699, 0.006136361975222826, 0.0091835241764783859, 0.013614295050501823, 0.0042107724584639072, 0.013910814188420773, 0.01474760752171278, 0.0046224161051213741, 0.0072680623270571232, 0.0078452173620462418, 0.0088528422638773918, 0.0057042241096496582, 0.0056995558552443981, 0.0059692100621759892, 0.0083084078505635262, 0.0051486929878592491, 0.0091356141492724419, 0.0053544477559626102, 0.0053350492380559444, 0.0042305989190936089, 0.0086136767640709877, 0.0041974619962275028, 0.011419364251196384, 0.0074835182167589664, 0.0093607353046536446, 0.0081012137234210968, 0.0064919227734208107, 0.0052293078042566776, 0.0045961998403072357, 0.0064716953784227371, 0.0061571095138788223, 0.0035673149395734072, 0.0095936581492424011, 0.0076116900891065598, 0.012702909298241138, 0.004148529376834631, 0.012283963151276112, 0.0075001497752964497, 0.0087260361760854721, 0.0069241398014128208, 0.0030278437770903111, 0.010843589901924133, 0.016279581934213638, 0.0076163271442055702, 0.0047760042361915112, 0.0076939444988965988, 0.0056876824237406254, 0.0090131731703877449, 0.0081497542560100555, 0.0046517052687704563, 0.010702052153646946, 0.0059686438180506229, 0.0053761685267090797, 0.0060112425126135349, 0.007594207301735878, 0.010136127471923828, 0.0072821681387722492, 0.0040657226927578449, 0.0048817177303135395, 0.0094116684049367905, 0.0097601590678095818, 0.012751774862408638, 0.0031697566155344248, 0.011391113512217999, } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&g0::quant6_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data12[96] = { 4784, 3760, 794, -2216, 5100, 6744, 9264, 880, 60, 14526, 1139, -3119, 5202, 5283, 596, -196, 3796, 9410, -703, -1025, 2717, 16736, 9831, -2858, -2423, -514, 14459, -321, 1099, 1237, 13820, -1575, 9488, 3139, 5247, -3818, 1858, -6624, 962, 1897, 3077, 1233, 1312, -298, 1608, 1274, 4241, 4755, 4379, 2599, 6371, 4358, -4115, 3178, 2168, 1263, 1594, 1690, 6500, 728, -752, 5846, 4018, 6488, 3303, 5468, -3924, 3970, 5975, -1594, 5331, 1596, 2865, 1987, 3879, 2059, -822, 2655, 2357, 2757, 2047, 1256, 9951, 834, 1525, 6165, 524, -1608, 26286, 331, 594, -700, 14654, 3583, -706, -2346, };
const TfArray<96, float> quant12_scale = { 96, { 0.00014553382061421871, 0.00011681143951136619, 0.00018080446170642972, 0.00012726850400213152, 0.00012294120097067207, 0.00012368882016744465, 8.2896032836288214e-05, 0.00032616528915241361, 0.00021813595958519727, 5.6419496104354039e-05, 0.0001634931395528838, 0.00014293094864115119, 0.00011127092875540257, 0.00010524277604417875, 0.00015084790356922895, 0.0002363296807743609, 0.00019632920157164335, 8.3859253209084272e-05, 0.00015618895122315735, 0.00014311332779470831, 0.00019318470731377602, 6.0247308283578604e-05, 9.5791358035057783e-05, 0.00013178985682316124, 0.0002030713512795046, 0.00017289225070271641, 5.8514026022749022e-05, 0.00014191211084835231, 0.00013341779413167387, 0.00019013740529771894, 6.6455788328312337e-05, 0.0002168516512028873, 9.0795183496084064e-05, 0.00013224655413068831, 0.00014238653238862753, 0.000165710793226026, 0.00014256931899581105, 9.8709431767929345e-05, 0.00014009072037879378, 0.00017523998394608498, 0.00014959376130718738, 0.00017185373872052878, 0.00021299727086443454, 0.00024313814355991781, 0.00017472625768277794, 0.0002032553602475673, 0.00014766356616746634, 0.00012390181655064225, 0.00015717405767645687, 0.00018967239884659648, 0.00010259026021230966, 0.00012336180952843279, 0.00010989277507178485, 0.0001358415320282802, 0.00011988972255494446, 0.00023994731600396335, 0.00018696296319831163, 0.00016849384701345116, 0.00011688542144838721, 0.00020676116400863975, 0.0001947722485056147, 0.0001154428900917992, 0.0001515835610916838, 0.00011665899364743382, 0.00012443587183952332, 0.00012984462955500931, 0.00015797399100847542, 9.6845920779742301e-05, 0.00010553422180237249, 0.00015466676268260926, 0.00012065361079294235, 0.00015477371925953776, 0.00013260595733299851, 0.0001730677904561162, 0.00015270481526385993, 0.00016342154412996024, 0.00017472369654569775, 0.00015421675925608724, 0.00015304773114621639, 0.00019265293667558581, 0.00019333114323671907, 0.00022610762971453369, 7.1737820690032095e-05, 0.00015059798897709697, 0.00025370792718604207, 0.00010973131429636851, 0.00020850493456237018, 0.00020854045578744262, 3.9900365663925186e-05, 0.00019203936972189695, 0.00025724960141815245, 0.00016999710351228714, 6.1613922298420221e-05, 0.00014199443103279918, 0.00018063232710119337, 0.00011050851753680035, } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ -20,64,7,-13,-42,-14,-27,-47,37,-18,10,-50,105,-127,33,-127, 
  /* [1][0][][] */ -120,35,-65,-117,-111,-12,-59,106,-45,21,127,-10,15,86,65,89, 
  /* [2][0][][] */ -52,-10,-82,3,-14,-83,-13,-24,-111,96,54,3,50,42,-39,127, 
  /* [3][0][][] */ -60,-74,-15,-62,-71,1,-33,-96,-24,10,52,-86,-49,-20,-127,-20, 
  /* [4][0][][] */ 63,10,-1,59,-25,-28,-127,31,53,104,29,65,-24,-1,-84,-82, 
  /* [5][0][][] */ -41,66,-83,-61,52,-70,-12,-44,48,-28,40,-38,45,-68,-113,-127, 
  /* [6][0][][] */ -39,-29,-49,20,-79,84,38,-77,-31,-16,104,-32,-41,1,-127,-3, 
  /* [7][0][][] */ -29,67,127,-80,45,55,-29,-13,22,26,-30,-36,48,6,4,83, 
  /* [8][0][][] */ -63,-20,21,15,45,30,32,127,-49,-4,-9,-10,45,100,-54,-51, 
  /* [9][0][][] */ 72,55,112,68,-127,-59,-109,-44,126,60,104,-35,0,-111,44,-22, 
  /* [10][0][][] */ -14,-46,-5,-36,-127,28,20,31,-43,-48,6,12,-15,55,-63,41, 
  /* [11][0][][] */ 127,-11,7,91,-91,-43,15,-26,68,76,-50,14,20,-72,36,67, 
  /* [12][0][][] */ -88,-71,100,-28,90,-25,40,73,65,-7,127,106,-14,57,-84,-12, 
  /* [13][0][][] */ -5,-43,48,34,21,15,111,86,-125,-10,-25,7,-42,127,103,-93, 
  /* [14][0][][] */ 108,-98,122,46,42,126,111,97,92,127,39,-3,54,-28,18,-59, 
  /* [15][0][][] */ 14,127,10,-25,88,122,-59,5,-19,-17,-46,17,-92,83,-55,-53, 
  /* [16][0][][] */ -53,58,127,-48,50,86,-13,-29,-25,26,-24,73,75,1,105,114, 
  /* [17][0][][] */ -15,54,97,-127,54,-67,28,-8,-32,44,-39,110,-26,5,70,-26, 
  /* [18][0][][] */ -87,-21,-81,-52,67,77,-56,-36,56,70,127,40,-34,111,-53,15, 
  /* [19][0][][] */ -1,82,69,54,31,14,16,20,-29,127,39,81,68,77,-35,40, 
  /* [20][0][][] */ 67,8,25,54,-40,25,-61,21,-5,-21,-127,-14,64,-57,52,-27, 
  /* [21][0][][] */ -113,-45,-13,127,-15,41,-108,45,17,22,1,-11,-76,24,-53,-12, 
  /* [22][0][][] */ -16,-15,-56,-70,127,26,-42,66,84,68,28,-1,-41,-13,-22,29, 
  /* [23][0][][] */ -86,19,-18,-4,-17,46,115,106,-59,127,-25,-47,15,25,-48,-35, 
  /* [24][0][][] */ 29,-53,8,-3,127,19,90,-13,17,17,36,2,-28,44,-19,9, 
  /* [25][0][][] */ 127,-31,86,0,-2,-15,-9,56,88,-39,-64,-6,87,-67,73,13, 
  /* [26][0][][] */ 84,67,127,105,60,10,-92,-25,-18,59,-20,69,30,-85,11,-76, 
  /* [27][0][][] */ -45,39,-76,29,-38,106,10,-76,15,-75,127,27,79,21,120,100, 
  /* [28][0][][] */ -29,41,-46,-127,12,-110,-3,-100,-97,107,-83,43,-16,9,2,98, 
  /* [29][0][][] */ 65,73,-52,47,61,61,-58,-14,37,61,9,79,-127,14,-15,48, 
  /* [30][0][][] */ -48,94,-123,-27,101,-45,46,-23,-86,55,-76,33,8,81,-7,127, 
  /* [31][0][][] */ 3,-96,97,-15,89,-50,-127,6,-58,-37,22,3,-86,45,82,39, 
  /* [32][0][][] */ -47,62,-19,28,-67,28,36,60,0,-127,37,-81,22,51,20,57, 
  /* [33][0][][] */ -54,33,67,127,11,53,-75,13,-65,-107,-7,-55,-18,2,46,124, 
  /* [34][0][][] */ -6,32,-66,-80,99,6,-37,98,4,15,15,-42,-57,-4,-31,127, 
  /* [35][0][][] */ 52,-16,24,-3,27,32,-72,-17,-8,-127,-42,11,0,-25,22,-46, 
  /* [36][0][][] */ -38,-5,-127,-60,13,117,3,84,-27,-2,95,70,-10,51,-118,73, 
  /* [37][0][][] */ 58,44,36,-45,23,-70,49,-26,-127,63,-85,-30,10,22,126,30, 
  /* [38][0][][] */ -24,82,49,-21,50,30,61,-67,42,3,-127,33,-56,-118,-81,2, 
  /* [39][0][][] */ 62,43,-91,-110,-36,-3,0,-92,30,25,-22,-72,59,-26,-127,-55, 
  /* [40][0][][] */ -40,65,-44,-120,-75,-45,-15,-127,-41,-8,-19,-60,85,46,82,40, 
  /* [41][0][][] */ -61,-112,-4,127,-16,-7,-81,-33,7,-29,54,-50,-59,-24,26,51, 
  /* [42][0][][] */ -22,70,-68,-127,57,54,32,-82,68,-39,-32,53,47,45,-83,36, 
  /* [43][0][][] */ 3,62,24,-10,121,8,16,12,-26,37,-7,-38,-127,-23,-6,-40, 
  /* [44][0][][] */ 68,-65,27,74,-27,12,-9,78,22,-96,66,51,127,38,-69,-54, 
  /* [45][0][][] */ 67,-61,-33,58,-34,-127,-13,27,59,20,-22,53,-93,105,66,-65, 
  /* [46][0][][] */ -35,-104,47,93,29,25,-99,70,50,-32,15,-28,-9,47,54,127, 
  /* [47][0][][] */ -53,-88,-9,115,24,11,92,45,19,-65,-127,-21,70,0,-92,42, 
  /* [48][0][][] */ -66,38,4,-55,-2,49,-14,-127,33,-7,13,-39,43,-100,-34,-8, 
  /* [49][0][][] */ -41,14,7,-45,5,12,127,99,-43,-11,-3,9,-15,41,-36,37, 
  /* [50][0][][] */ 62,51,-65,11,25,-127,-46,-12,-91,64,-48,27,56,-62,-88,-66, 
  /* [51][0][][] */ -60,17,-54,72,-17,33,-28,-45,-25,-79,-7,-63,9,6,-31,127, 
  /* [52][0][][] */ -116,25,2,-5,9,28,75,22,-4,-81,-27,-54,-71,-36,-127,6, 
  /* [53][0][][] */ -85,-92,-93,-127,-15,-10,57,57,40,-36,-40,53,27,27,59,78, 
  /* [54][0][][] */ 12,-127,-53,-40,-73,47,53,-27,0,-84,78,47,-13,-18,-108,74, 
  /* [55][0][][] */ -10,-29,-25,41,96,-33,29,78,-63,-40,-127,-55,51,-23,-22,29, 
  /* [56][0][][] */ 40,-34,-34,-35,-127,9,-81,-26,-38,-27,-47,14,98,-49,74,-5, 
  /* [57][0][][] */ -43,-2,34,-23,105,26,80,9,2,45,-14,15,-56,62,-127,-17, 
  /* [58][0][][] */ 39,0,-4,-35,18,-10,-64,-33,15,-127,-39,8,-49,-28,-18,42, 
  /* [59][0][][] */ -31,5,-16,38,-21,49,-95,-54,71,127,-103,-17,-18,22,-7,26, 
  /* [60][0][][] */ -24,-107,0,22,-127,-5,32,-46,20,78,-34,51,-32,-70,1,62, 
  /* [61][0][][] */ 14,29,-67,-2,-16,-5,-119,-58,-42,28,49,127,68,-30,104,56, 
  /* [62][0][][] */ 35,-28,81,-18,-34,7,44,117,-18,127,-30,83,30,3,64,85, 
  /* [63][0][][] */ -5,-127,-27,-26,-32,-9,45,-16,-11,-36,15,-26,-53,89,56,47, 
  /* [64][0][][] */ -26,-30,-100,-44,72,70,2,-2,-17,-127,93,8,46,-101,-115,121, 
  /* [65][0][][] */ -4,-26,57,70,127,-26,61,44,3,-6,-121,-76,14,78,-61,-8, 
  /* [66][0][][] */ -64,-127,29,-50,-31,-109,42,-25,2,-19,17,100,-4,-43,-11,36, 
  /* [67][0][][] */ -4,-87,-87,-28,-84,80,-35,-127,-41,-45,-8,-68,38,-22,-78,64, 
  /* [68][0][][] */ 93,27,17,17,-61,27,-117,-33,-86,-127,18,15,28,-16,115,-114, 
  /* [69][0][][] */ 19,-9,15,-45,11,-38,-4,35,-2,127,-14,13,-8,35,44,-23, 
  /* [70][0][][] */ 19,-8,-4,78,-84,14,8,-119,125,127,-4,66,19,-90,-13,22, 
  /* [71][0][][] */ 70,-112,85,56,-66,-63,34,-43,127,59,-67,79,72,-21,21,23, 
  /* [72][0][][] */ -31,-72,12,67,85,55,-108,67,55,-10,64,-2,-63,-36,-127,55, 
  /* [73][0][][] */ 11,7,52,-127,29,-59,-59,19,-12,83,-42,39,-25,-52,8,-48, 
  /* [74][0][][] */ 70,1,77,38,-127,-61,18,16,-29,-82,42,-5,-2,-102,-28,26, 
  /* [75][0][][] */ 29,66,-54,-2,59,96,0,-54,4,-57,31,85,-127,31,21,51, 
  /* [76][0][][] */ -103,-64,-10,-43,-25,-13,96,12,-73,31,126,35,-60,-127,-53,114, 
  /* [77][0][][] */ -47,127,2,43,-88,-85,19,70,49,-52,18,72,-59,75,-21,127, 
  /* [78][0][][] */ 127,35,-51,19,-51,37,-121,-8,1,-2,-42,-14,58,-62,22,50, 
  /* [79][0][][] */ -46,2,127,99,-58,-110,-57,-40,-2,49,13,-40,-40,77,-34,101, 
  /* [80][0][][] */ 93,127,33,-117,-7,31,34,-7,-12,28,-24,9,76,-12,-12,18, 
  /* [81][0][][] */ 30,-69,-14,-80,39,54,-48,127,118,4,5,-67,9,34,-86,-41, 
  /* [82][0][][] */ 56,54,51,-52,125,-68,30,46,-38,89,-51,10,21,-30,64,-127, 
  /* [83][0][][] */ -77,31,44,-14,73,24,115,71,-2,36,-48,-44,-127,41,-82,-107, 
  /* [84][0][][] */ 19,-58,-12,100,2,-114,-127,80,-33,48,-36,-56,-48,10,-21,-14, 
  /* [85][0][][] */ -99,83,-40,-40,-30,-100,-23,-54,-14,77,-8,-127,-115,-125,-91,43, 
  /* [86][0][][] */ -14,40,68,127,60,-43,42,49,11,12,-53,-79,53,45,-106,-49, 
  /* [87][0][][] */ -31,40,127,-40,-120,-48,52,15,31,-58,9,72,-56,20,-16,-2, 
  /* [88][0][][] */ -21,-64,-127,-17,24,8,11,50,-41,-96,-77,-65,124,12,-6,66, 
  /* [89][0][][] */ 2,-1,16,-64,26,-67,-50,60,127,-19,32,-57,-7,-53,62,-64, 
  /* [90][0][][] */ -21,29,35,13,-38,25,41,108,27,-83,-17,127,24,-1,-44,112, 
  /* [91][0][][] */ -54,8,-35,75,112,36,-57,-103,-57,66,7,46,-127,-118,-65,-13, 
  /* [92][0][][] */ -58,61,28,-20,-116,18,-127,106,-25,98,74,107,-25,-17,99,-17, 
  /* [93][0][][] */ 73,31,74,55,-127,-55,-10,57,-39,-51,-12,-77,48,-38,10,-1, 
  /* [94][0][][] */ -41,-127,10,-80,-2,6,-31,12,68,-32,10,31,1,55,-62,61, 
  /* [95][0][][] */ -54,-79,-57,-38,127,114,-43,77,109,35,-63,48,-50,125,-103,67, 
};
const TfArray<96, float> quant13_scale = { 96, { 0.0019418282900005579, 0.0015585912624374032, 0.0024124372284859419, 0.0016981178196147084, 0.0016403795452788472, 0.0016503548249602318, 0.0011060648830607533, 0.0043519572354853153, 0.0029105436988174915, 0.00075279385782778263, 0.0021814557258039713, 0.0019070986891165376, 0.0014846654376015067, 0.0014042329275980592, 0.0020127329044044018, 0.003153298981487751, 0.0026195805985480547, 0.0011189170181751251, 0.0020839974749833345, 0.0019095320021733642, 0.0025776242837309837, 0.00080386758781969547, 0.0012781246332451701, 0.0017584452871233225, 0.0027095398399978876, 0.0023068662267178297, 0.00078074075281620026, 0.0018935045227408409, 0.0017801665235310793, 0.0025369648355990648, 0.00088670605327934027, 0.0028934075962752104, 0.0012114617275074124, 0.0017645388143137097, 0.0018998346058651805, 0.0022110454738140106, 0.0019022733904421329, 0.0013170598540455103, 0.0018692020094022155, 0.002338191494345665, 0.0019959991332143545, 0.0022930095437914133, 0.0028419792652130127, 0.003244142746552825, 0.0023313369601964951, 0.0027119950391352177, 0.001970245037227869, 0.0016531967557966709, 0.0020971414633095264, 0.0025307603646069765, 0.0013688410399481654, 0.0016459915786981583, 0.0014662769390270114, 0.0018125060014426708, 0.0015996642177924514, 0.003201568266376853, 0.0024946087505668402, 0.002248179167509079, 0.0015595784643664956, 0.002758772112429142, 0.0025988065171986818, 0.0015403310535475612, 0.0020225485786795616, 0.001556557253934443, 0.0016603225376456976, 0.0017324904911220074, 0.0021078148856759071, 0.0012921954039484262, 0.0014081216650083661, 0.0020636871922761202, 0.0016098566120490432, 0.0020651142112910748, 0.0017693344270810485, 0.002309208270162344, 0.0020375093445181847, 0.0021805004216730595, 0.0023313027340918779, 0.0020576829556375742, 0.0020420846994966269, 0.0025705290026962757, 0.002579578198492527, 0.0030169081874191761, 0.00095718313241377473, 0.0020093983039259911, 0.0033851731568574905, 0.001464122673496604, 0.0027820388786494732, 0.0027825129218399525, 0.00053238245891407132, 0.0025623422116041183, 0.0034324291627854109, 0.0022682368289679289, 0.00082210206892341375, 0.001894602901302278, 0.0024101403541862965, 0.0014744927175343037, } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data14[16] = { -30733, -13280, 10207, -7890, 13937, -14701, 23641, -14961, 13473, -13631, 19495, 17775, -12604, -38298, -1348, 7131, };
const TfArray<16, float> quant14_scale = { 16, { 6.5805856138467789e-05, 4.6767894673394039e-05, 4.9387257604394108e-05, 6.1600141634698957e-05, 0.00010993628529831767, 9.5906492788344622e-05, 5.707989475922659e-05, 5.0604667194420472e-05, 0.0001149478048318997, 0.00012963810877408832, 7.4583593232091516e-05, 7.6040763815399259e-05, 6.4949977968353778e-05, 6.0153437516419217e-05, 9.2866401246283203e-05, 5.3765055781695992e-05, } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ 28,33,23,1,-47,-86,-23,26,12,-93,16,-10,67,-86,91,39,-66,-10,49,22,88,34,-62,0,11,33,127,63,25,61,36,-42,17,4,13,-37,7,11,-2,16,110,26,11,-41,-9,0,-15,-27,52,-24,106,-25,-60,19,53,42,-12,-64,10,24,-9,79,-35,0,16,8,83,19,12,-2,38,19,16,33,13,17,67,-40,45,44,-18,23,15,46,-64,8,-9,57,1,-4,-92,-13,38,39,86,53, 
  /* [1][0][][] */ 27,29,-24,-32,-45,-57,79,-38,-31,-67,-31,-42,19,-56,30,-42,2,20,-14,5,-1,-55,123,-40,18,17,3,55,-59,-7,-49,17,-15,13,38,-18,-56,25,-59,99,6,10,13,-81,52,-39,-11,39,-80,22,58,-110,-31,72,75,43,72,-1,-39,28,-39,29,12,-10,43,49,127,-2,-39,-108,15,19,16,57,-1,26,-39,-21,113,-10,45,-29,26,-48,-29,-57,-21,8,-35,-45,24,18,59,-46,-48,33, 
  /* [2][0][][] */ 16,-16,1,-6,50,52,-30,33,-33,44,4,-31,12,-24,15,28,32,-22,-127,-2,-8,-28,-26,25,-10,-3,-44,10,-18,-6,-26,67,-32,-25,-14,16,-38,10,-10,-40,34,-2,-12,26,15,43,-15,-22,-63,7,-26,0,-25,14,14,-63,24,-3,63,7,8,-22,-36,40,19,-19,-39,1,-21,13,-28,-52,9,45,23,55,-68,4,-34,-52,15,12,63,-30,-13,-58,-12,-49,-32,-31,-15,58,-18,2,87,-34, 
  /* [3][0][][] */ 38,-28,-23,-127,-13,-16,81,-37,34,102,-84,-26,15,-42,-30,68,69,34,-9,22,-51,26,42,-1,-43,38,56,-14,-28,-19,-86,49,16,-31,9,-49,-11,-61,0,83,-14,5,-31,6,42,-38,-23,20,59,-35,27,-60,114,66,29,-18,-8,-45,14,-36,-38,58,50,-19,-27,-25,106,-49,-37,-8,-45,26,14,-84,0,-87,39,-54,112,23,-3,-66,-50,-37,-39,-48,75,57,-57,76,-41,-11,-1,-44,-42,16, 
  /* [4][0][][] */ -35,81,21,8,21,19,-62,-55,5,-20,-11,-7,22,48,-51,41,-8,-55,-2,-76,42,-58,-38,8,-36,-43,-18,24,-59,127,-37,-17,16,-31,0,-43,84,57,-58,9,25,-22,27,-22,-45,-11,60,-22,15,-27,-66,6,-55,32,40,27,-6,83,-29,14,-49,-98,-58,-15,74,27,-60,1,9,-43,20,-71,-24,39,57,53,-28,6,-41,43,36,69,57,-59,48,-51,-20,-69,-15,-44,-37,-35,15,-12,24,-19, 
  /* [5][0][][] */ -21,-3,24,-4,1,-20,-6,-1,25,19,-24,9,-31,-15,20,-23,-8,-5,-57,-37,-30,19,-30,10,7,-40,63,-1,-15,50,22,86,-19,-85,13,13,-23,-14,-37,-7,-31,16,-10,2,16,29,-54,13,-22,4,40,3,18,-64,3,24,-13,-37,0,-24,18,17,11,24,-46,3,104,-10,-13,-39,16,10,-7,14,42,11,-18,-13,127,30,-11,-13,-16,42,51,50,0,95,-1,-21,4,5,4,-15,-15,25, 
  /* [6][0][][] */ 35,-82,40,14,-9,127,-34,-88,-47,-61,-77,17,-17,31,-52,79,6,9,-12,-31,-64,-33,-76,-65,-13,-33,-46,66,-85,49,4,-22,27,91,-11,-4,37,-27,30,-39,-43,37,39,-23,26,-6,-79,-13,51,2,-87,-88,36,-29,-55,-39,2,-15,14,-20,12,-84,21,-8,42,-83,-69,-28,-83,23,-26,-96,-37,-65,6,-94,60,20,-59,24,-21,82,48,-84,52,-45,18,12,-42,31,-56,81,35,-33,68,-72, 
  /* [7][0][][] */ 3,8,-39,42,-39,-11,23,15,-65,-8,95,57,15,-62,16,-44,0,16,20,11,-32,-11,-19,-6,86,56,-14,46,19,18,-1,8,-33,-117,31,102,-18,-3,-30,7,-9,-21,-16,-68,50,43,38,92,13,57,-48,-17,41,-86,59,-52,-15,26,-75,-17,67,17,27,-45,85,-30,115,-33,-67,-7,47,8,-18,8,-52,-11,52,-31,127,-17,-20,-20,-88,-51,53,39,-84,57,-33,-1,-2,33,76,13,60,-27, 
  /* [8][0][][] */ -5,-42,-4,21,2,5,19,-5,18,-11,35,39,9,29,-57,-14,79,-10,0,21,-13,-85,-50,-29,-17,-52,65,21,-19,57,13,-22,-27,4,5,-19,-33,-10,18,-27,2,49,23,-42,29,-17,37,-21,41,5,55,12,-4,8,-41,6,-32,80,-35,-3,-20,-58,-67,6,-91,-15,-31,31,-22,35,33,-35,-39,-127,39,-119,3,3,-64,24,-19,-22,3,86,58,-68,-39,58,-25,93,18,-18,-55,-14,8,-59, 
  /* [9][0][][] */ -18,-42,-24,20,-24,17,-2,60,-33,1,81,45,-7,51,36,-33,-6,57,-9,-36,4,24,-8,-2,-9,11,3,24,21,-8,1,-9,-10,-9,22,33,-39,-14,16,17,-6,-25,-2,14,11,59,4,30,-39,10,-1,14,127,44,12,-6,55,-5,34,23,-42,20,71,15,22,33,68,0,49,-17,-19,-1,18,-123,-34,-115,-24,20,33,6,-8,16,-11,-26,34,21,-45,-5,-2,106,37,22,38,28,-14,29, 
  /* [10][0][][] */ 37,32,13,-15,-30,15,-27,-16,56,1,-42,7,19,0,-7,-74,-27,2,4,5,22,-6,-32,-27,3,-5,-82,28,-12,35,-13,6,13,28,-11,-5,2,-7,11,-3,28,-15,55,-45,-42,-8,2,32,23,-8,13,-32,-14,-39,18,19,-16,-5,6,-19,11,-57,-16,9,-2,-11,-84,-34,-52,1,31,-11,-24,32,20,24,40,-9,-105,-4,-19,15,7,-24,-1,-14,-79,-127,-22,11,-1,20,65,-36,27,23, 
  /* [11][0][][] */ 40,-20,0,5,-45,36,23,-8,77,-2,-30,-38,21,12,-4,-18,-19,43,19,-45,6,20,-1,-21,23,25,58,-19,40,-49,-29,9,5,79,-93,11,20,-28,58,-6,-59,25,-25,6,-35,8,-28,-1,46,-1,-36,-18,-11,-7,-62,84,-37,-22,18,-45,45,-18,-2,-62,-10,-43,-127,-77,-11,-6,-101,23,40,11,-4,7,30,58,-112,-55,-37,-20,-12,-28,-12,-17,31,56,7,-35,-14,3,-36,4,87,8, 
  /* [12][0][][] */ 41,8,-27,-42,-11,-23,-3,70,81,-58,45,-2,19,-30,46,19,22,-27,-19,25,42,72,32,60,-23,-65,-117,-20,94,-40,13,-10,-2,-52,84,-12,19,-28,-10,35,-2,-65,-2,43,42,5,10,-2,-44,22,-52,81,73,18,38,-79,6,8,-35,-35,21,75,89,13,-12,-6,65,6,127,51,29,35,30,-13,-14,0,-17,-55,56,-51,11,-45,8,-35,-4,11,8,-111,-24,30,-37,46,23,97,-4,41, 
  /* [13][0][][] */ -2,13,-94,8,10,31,-3,24,42,48,-36,27,-68,-38,50,-31,24,70,55,30,-11,-37,-14,25,64,68,-42,26,27,25,41,-7,-14,84,17,52,8,-52,-39,-34,13,11,5,-5,60,38,-47,59,-28,47,-6,-14,-5,-44,48,41,30,-55,-12,13,31,54,1,-54,35,113,127,15,17,13,-62,-22,49,73,-100,67,35,-46,122,-35,-20,-32,4,11,12,58,-26,0,-27,-39,24,46,68,46,76,71, 
  /* [14][0][][] */ 4,68,28,9,-91,-60,13,80,-44,-28,71,-7,-46,-19,78,-15,-33,49,-32,32,-20,56,-98,15,-46,-5,-39,-117,38,-5,11,65,-49,13,8,-12,-40,-81,-4,-32,10,-36,30,-29,-14,69,-91,25,1,-25,68,7,-11,24,-24,26,-59,-4,25,30,51,81,11,48,14,-43,7,-85,29,94,53,42,-39,42,12,14,40,1,25,20,-91,96,-20,-127,78,-20,-31,5,-127,-4,-27,16,-39,50,27,20, 
  /* [15][0][][] */ 76,-35,37,21,33,4,-27,-1,20,35,-51,-30,61,60,-51,-9,-8,9,-88,60,-22,-27,-20,42,58,-29,92,1,44,-41,-48,51,71,51,4,-72,55,50,38,51,106,8,-1,22,-63,-127,16,-24,-44,-20,-5,-12,-21,-62,-59,60,-26,-1,-21,28,11,-50,-47,51,56,49,-87,22,-15,-43,5,11,4,-97,-60,-65,-10,37,-120,39,55,-41,52,10,-58,20,-1,-24,71,58,-11,-46,-31,-32,27,-37, 
};
const TfArray<16, float> quant15_scale = { 16, { 0.0028795965481549501, 0.002046514768153429, 0.0021611354313790798, 0.00269555882550776, 0.0048106983304023743, 0.0041967690922319889, 0.0024977573193609715, 0.0022144080139696598, 0.0050299973227083683, 0.005672830156981945, 0.003263701219111681, 0.003327465383335948, 0.0028421441093087196, 0.0026322524063289165, 0.0040637380443513393, 0.0023527033627033234, } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data16[96] = { 14434, 1, -10412, 11840, -2313, -6212, 2020, -2661, -842, -6922, -306, 2956, 6951, -1896, -1843, -1947, 31, 496, -7872, 2659, -3676, 1089, -5987, -5157, 38, 5639, -12078, -941, 2692, -5123, 4822, -2433, 19596, 7337, -3347, -4811, 2408, 3888, 3179, 10776, -1141, 4944, 1019, 1010, 383, -943, 12903, 7226, -1647, 748, -2915, 3549, 1605, -2903, -2335, 3762, -1571, -1888, 1610, 2091, -2577, 1272, -1052, 3843, 9687, 7997, 11669, 10493, -435, -65, 8278, -202, -12, -636, -4760, -1712, 17989, 14032, 7120, 12686, 9621, -2664, 11921, 12538, 1032, 5145, 3638, -8596, 13794, 677, -11135, -3115, 131, 452, 12584, 4651, };
const TfArray<96, float> quant16_scale = { 96, { 7.4465511715970933e-05, 0.00021770499006379396, 9.281367965741083e-05, 9.9312303063925356e-05, 0.00022118844208307564, 0.00027428087196312845, 0.00011887710570590571, 0.00022790003276895732, 0.00032674521207809448, 0.00012356524530332536, 0.00027280740323476493, 9.0833505964837968e-05, 6.4552303228992969e-05, 0.00012693183089140803, 0.00019380923185963184, 0.00019215345673728734, 0.00023915387282613665, 0.00043978763278573751, 0.00014649453805759549, 0.00031100332853384316, 0.00021034828387200832, 0.00018528039800003171, 0.00013474417210090905, 0.00010275714157614857, 0.0037777810357511044, 0.00019105663523077965, 0.00015527114737778902, 0.00025048898532986641, 0.00028304455918259919, 0.00013181696704123169, 9.7565520263742656e-05, 0.00021912920055910945, 4.7637589887017384e-05, 0.00027817866066470742, 0.0001243677397724241, 0.00016439937462564558, 0.00025584976538084447, 0.00016946996038313955, 0.00022970355348661542, 0.00010212856432190165, 0.00064986984943971038, 0.00019427028018981218, 0.00020538992248475552, 0.00017605326138436794, 0.00022337515838444233, 0.00029743259074166417, 8.2298909546807408e-05, 0.00017385582032147795, 0.00026239102589897811, 0.0002473433269187808, 0.00027486041653901339, 0.00016106564726214856, 0.00014129049668554217, 0.00032591121271252632, 0.00025094897137023509, 0.00018330800230614841, 0.00021224736701697111, 0.00048802964738570154, 0.00042824292904697359, 0.00017501972615718842, 0.00026891427114605904, 0.00027010618941858411, 0.00014764234947506338, 0.00015952801913954318, 0.00024543149629607797, 0.000222538918023929, 0.00015225609240587801, 0.00011562004510778934, 0.00028232517070136964, 0.00053042243234813213, 0.00011832267773570493, 0.00016442865307908505, 0.0011256140423938632, 0.00014387756527867168, 0.00011679227463901043, 0.00018308102153241634, 6.6000917286146432e-05, 0.0001166217916761525, 0.00015077542047947645, 0.00015320457168854773, 7.3101851739920676e-05, 0.00020101644622627646, 9.3374270363710821e-05, 0.00022509151312988251, 5.9684578445740044e-05, 0.00030305623658932745, 0.00014348358672577888, 0.00014354284212458879, 0.00010759646829683334, 0.00024230337294284254, 6.9234163674991578e-05, 0.00020935843349434435, 0.00040095622534863651, 0.00015093723777681589, 0.00012727471766993403, 0.00014998890401329845, } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -106,-13,26,-48,109,19,4,22,4,25,-13,-65,-33,-13,-17,-28,-19,11,-50,-10,6,35,-1,62,-13,-29,-11,-24,8,13,8,12,39,-21,-9,-8,-4,-20,-32,-22,2,2,50,-9,-25,41,-119,-48,-34,-21,-12,38,-87,1,60,-23,-4,3,4,-6,-3,-21,-19,-12,-18,-51,-61,-37,-18,22,-37,1,24,14,16,1,27,62,127,-6,-125,23,-93,-3,-8,-32,41,20,-63,-15,19,-30,0,79,13,-20, -68,56,56,-24,-37,14,127,-32,8,-16,-38,-23,-72,4,-94,42,-15,57,111,-29,29,127,41,127,14,-11,88,37,127,27,119,-10,-33,-40,-107,-43,-34,-47,127,-29,-18,-127,-5,-6,56,-29,-12,-17,25,-35,30,111,-98,-10,-79,14,-63,6,-18,33,5,-127,-95,-73,-27,-33,-11,-115,-2,12,-48,104,-127,1,33,-18,-43,-126,-6,-81,-82,31,15,-83,110,46,-71,44,-75,0,63,2,-3,126,-16,-127, -115,20,17,-2,81,14,77,-14,-11,28,-14,-30,-43,-62,-17,-65,-7,-11,22,-21,-22,16,21,53,-18,0,11,-45,-11,12,-7,20,-42,-20,-25,88,-4,-50,-41,10,-11,-42,7,19,-26,-36,-11,-38,-37,4,-18,25,24,-4,-7,-28,68,-5,-1,-12,-12,-16,-63,67,-19,-65,127,-13,-9,9,-5,52,7,1,15,30,13,36,-38,-77,-25,15,-127,0,40,-38,33,20,-109,-32,-3,56,-13,13,15,-10, 
  /* [0][1][][] */ -94,-14,127,-47,63,127,-60,12,7,-15,-9,-59,-103,37,33,34,-8,36,63,10,24,-26,76,4,22,18,105,-8,-15,21,-35,-12,-88,-38,60,-6,-25,-61,-73,-127,-9,22,72,-18,-65,127,-119,-108,39,61,3,-60,-127,58,86,-52,30,-19,22,3,27,-26,84,-18,-55,-23,-21,-50,-17,4,-127,-9,38,127,3,-71,-127,-86,-55,-71,-31,-7,-55,-69,50,-1,-73,39,-127,127,66,-102,127,-4,-45,-29, 69,127,107,87,-127,-122,78,-63,127,101,-62,-117,-56,127,0,127,127,-127,127,127,127,-80,82,-66,-127,-127,127,127,-103,127,-45,127,-63,127,127,-55,127,127,-36,-39,127,10,-127,-71,127,-17,127,127,127,-127,127,-127,75,127,-127,127,-108,127,-127,127,-108,77,93,-127,127,127,-15,127,-90,-127,-12,-127,3,111,127,69,2,-127,84,-127,41,127,61,127,127,34,-127,127,13,49,-38,-49,-91,-31,-127,-59, -127,-34,60,-71,27,85,-78,-19,-24,18,-4,127,-127,45,17,11,-22,40,61,-3,-2,-31,48,13,35,20,33,-39,-39,4,-6,-3,-127,-53,81,127,-20,-47,-83,-57,-20,3,18,-10,-69,-70,-102,-118,15,76,-18,-40,103,57,103,-55,127,-14,39,-35,4,-38,-127,-43,-97,-23,-59,-57,-19,-10,-71,-3,46,-90,1,127,-60,-107,-43,14,-127,0,-91,-88,29,2,-84,53,-65,-90,127,127,-45,6,-68,-34, 
  /* [0][2][][] */ -4,-56,1,-38,44,25,-38,55,-1,39,32,-72,45,-9,-1,-62,-1,8,-28,-39,-3,-33,127,4,-7,23,-23,-18,7,16,-56,18,-63,-28,-3,-6,-21,-37,7,-29,-19,-30,15,10,13,14,-67,-26,-44,-29,-21,-31,-20,-13,40,-26,30,-6,2,-16,13,55,13,64,-25,-48,116,10,28,29,-20,-25,-18,1,15,-21,-57,71,-23,-14,-48,2,-98,-44,23,-18,89,-5,8,-1,38,-8,-4,-38,17,-22, 20,-61,2,-127,-40,23,28,127,-50,127,127,-70,-31,22,127,51,-14,-36,35,-69,-12,-33,47,33,3,31,13,-7,-24,-4,-127,-27,-80,-47,-53,33,-99,-24,58,-45,-18,-88,-59,127,38,-9,-74,-15,-14,-21,7,-20,48,18,-57,-47,-56,-33,39,-60,127,45,86,28,-64,-84,-24,-53,127,25,0,-19,22,-15,-8,-10,-26,-76,9,20,-41,-19,-40,-85,34,-127,58,-5,28,-13,60,23,19,-127,-32,108, -28,-3,-8,-48,45,17,-38,9,-11,9,19,14,83,39,-2,-86,-10,18,-31,-42,-21,-24,-33,10,-12,41,-40,-28,-18,25,-63,17,-27,-18,23,13,-18,-50,-1,-3,-37,14,-20,15,7,-5,-118,-7,-62,-13,-24,-26,0,-15,21,-12,76,0,6,-36,14,19,-6,58,-41,-37,-47,29,21,19,-1,-8,-35,-34,17,6,-21,-27,105,20,-4,4,-33,-31,19,-13,80,23,-98,-18,-21,28,0,-37,18,-35, 
};
const TfArray<96, float> quant17_scale = { 96, { 0.0035319894086569548, 0.01032601110637188, 0.0044022649526596069, 0.0047105024568736553, 0.010491235181689262, 0.013009472750127316, 0.0056384848430752754, 0.010809574276208878, 0.015497920103371143, 0.0058608492836356163, 0.012939585372805595, 0.0043083429336547852, 0.0030617937445640564, 0.0060205301269888878, 0.0091926064342260361, 0.0091140707954764366, 0.011343357153236866, 0.020859658718109131, 0.0069484133273363113, 0.01475126389414072, 0.0099770734086632729, 0.0087880734354257584, 0.0063910786993801594, 0.0048738955520093441, 0.17918471992015839, 0.009062047116458416, 0.0073646982200443745, 0.011880995705723763, 0.013425145298242569, 0.0062522380612790585, 0.0046276506036520004, 0.010393562726676464, 0.0022595084737986326, 0.013194350525736809, 0.0058989124372601509, 0.0077976607717573643, 0.012135263532400131, 0.0080381650477647781, 0.010895117186009884, 0.0048440811224281788, 0.030824113637208939, 0.0092144738882780075, 0.0097418921068310738, 0.0083504188805818558, 0.010594953782856464, 0.014107586815953255, 0.0039035368245095015, 0.0082461917772889137, 0.012445523403584957, 0.01173179317265749, 0.013036961667239666, 0.0076395380310714245, 0.0067015788517892361, 0.015458362177014351, 0.011902812868356705, 0.0086945202201604843, 0.010067149065434933, 0.023147836327552795, 0.020312080159783363, 0.0083013968542218208, 0.012754928320646286, 0.012811462394893169, 0.0070028551854193211, 0.0075666066259145737, 0.011641113087534904, 0.010555289685726166, 0.0072216908447444439, 0.0054839984513819218, 0.013391023501753807, 0.025158578529953957, 0.0056121875531971455, 0.0077990498393774033, 0.053389236330986023, 0.0068242871202528477, 0.0055395988747477531, 0.0086837541311979294, 0.0031305032316595316, 0.0055315126664936543, 0.007151460275053978, 0.0072666779160499573, 0.0034673090558499098, 0.0095344530418515205, 0.0044288546778261662, 0.010676362551748753, 0.002830911660566926, 0.01437432412058115, 0.0068056001327931881, 0.0068084108643233776, 0.0051034307107329369, 0.011492742225527763, 0.0032838601619005203, 0.0099301235750317574, 0.019017837941646576, 0.0071591357700526714, 0.0060367938131093979, 0.0071141547523438931, } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&g0::quant6_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data18[96] = { 1060, 6549, 786, 1092, 6892, 12279, -945, 1193, 16669, -725, 21006, 6519, 1364, 336, 6626, -99, 3842, 5821, -1249, 18536, 2171, 7043, -1233, 1535, -14212, 1143, 2182, 3315, 8535, 1174, 9209, 3984, 4441, 12886, 5468, 6389, 5447, 2333, 5230, 4359, 25545, 2172, 2379, 1104, 4085, 14524, 7304, 12538, 2639, -1210, 2424, 9237, 3180, -1836, 8416, 173, 2740, 23056, 1386, 876, 2203, 11867, 2100, -642, 12632, 24965, 1748, 3911, 5706, 7429, 1726, 2350, -5729, 4006, 2503, 2368, -218, 14100, 6690, 6309, 4247, 1363, 3851, 12939, -1895, 13290, 8560, 2724, -714, 3471, 1589, 10291, 3667, 2220, 5547, 8816, };
const TfArray<96, float> quant18_scale = { 96, { 0.00025465275393798947, 0.00012476101983338594, 0.00018050766084343195, 0.00028986978577449918, 9.5263523689936846e-05, 6.9346941018011421e-05, 0.00016421139298472553, 0.00019742098811548203, 5.3393054258776829e-05, 0.00023422848607879132, 3.8628615584457293e-05, 8.8925939053297043e-05, 0.0001832595735322684, 0.0002815588959492743, 8.3420804003253579e-05, 0.00016192154726013541, 0.00016396246792282909, 0.00012420794519130141, 0.00011750293924706057, 4.9733072955859825e-05, 0.00014143946464173496, 9.8391770734451711e-05, 0.00014858852955512702, 0.00013302668230608106, 6.022182060405612e-05, 0.00012740479724016041, 0.0001773795229382813, 0.00013000439503230155, 0.0001089038050849922, 0.00012519056326709688, 6.8104527599643916e-05, 0.0001158697996288538, 8.9606197434477508e-05, 6.7015258537139744e-05, 0.00011289567191852257, 9.6334973932243884e-05, 0.00011606902990024537, 0.00018420554988551885, 9.8001626611221582e-05, 0.00011666592035908252, 3.9467766328016296e-05, 0.00015844777226448059, 0.0001746238413034007, 0.00015360368706751615, 8.9301465777680278e-05, 5.2679992222692817e-05, 9.0585330326575786e-05, 7.1609123551752418e-05, 0.00016048787801992148, 0.00015859154518693686, 0.00017608061898499727, 8.3647937572095543e-05, 0.00017770761041902006, 0.0001640014088479802, 7.8055287303868681e-05, 0.00030400880496017635, 0.00013223369023762643, 3.9559658034704626e-05, 0.00010142567771254107, 0.00015227645053528249, 0.00018906295008491725, 7.7620519732590765e-05, 0.00024733145255595446, 0.00017639326688367873, 6.5653184719849378e-05, 4.010835982626304e-05, 0.00021566971554420888, 0.00015075219562277198, 0.00014135782839730382, 8.2077487604692578e-05, 0.00027594284620136023, 9.7999160061590374e-05, 0.00011828228161903098, 0.0001409366523148492, 0.000154289067722857, 0.0002356586919631809, 0.00014629762154072523, 6.1151411500759423e-05, 0.00011157139670103788, 0.00013085246609989554, 9.6536896307952702e-05, 0.00011383966193534434, 0.00012177973258076236, 6.8454923166427761e-05, 8.5959683929104358e-05, 5.8300072851125151e-05, 0.00010246312740491703, 0.00014285393990576267, 0.00010738694982137531, 0.00017057833611033857, 0.00013759102148469537, 8.5434097854886204e-05, 0.00010858633322641253, 0.0001874679874163121, 8.2224731158930808e-05, 8.8496453827247024e-05, } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 30,22,-9,51,-127,-11,93,41,30,60,-6,3,0,-1,13,74, 
  /* [1][0][][] */ -48,17,-62,-23,87,127,-23,0,6,20,-90,-8,-21,80,-77,-51, 
  /* [2][0][][] */ -20,73,80,4,32,55,-7,37,41,-9,22,-20,29,-127,7,-2, 
  /* [3][0][][] */ 127,-6,14,10,21,30,-6,28,14,38,-23,3,-36,71,-25,51, 
  /* [4][0][][] */ -58,-6,-18,25,-72,35,-44,-65,-17,32,-1,-24,-45,42,-47,127, 
  /* [5][0][][] */ -83,-19,25,-2,127,52,-19,-37,-63,58,-14,-30,-91,3,-103,-30, 
  /* [6][0][][] */ -127,42,-20,0,-4,-77,103,5,10,-19,-62,46,16,11,-15,12, 
  /* [7][0][][] */ -23,45,59,-49,73,25,127,-9,7,-7,-6,64,78,45,-23,-7, 
  /* [8][0][][] */ -28,6,-93,96,-22,92,-38,-67,22,-1,120,69,127,22,-116,-11, 
  /* [9][0][][] */ -45,-127,-42,52,-11,-30,2,44,18,22,-4,33,-61,0,-29,-4, 
  /* [10][0][][] */ -27,-81,-123,-5,-127,69,112,-87,-21,-40,29,-90,85,105,-91,35, 
  /* [11][0][][] */ -28,-66,-18,71,-39,74,0,22,44,-13,57,-72,26,110,-95,127, 
  /* [12][0][][] */ -67,-92,-85,65,-93,-78,35,51,68,23,-11,127,-23,6,-47,29, 
  /* [13][0][][] */ -70,-31,-40,1,-22,-9,15,27,-24,127,-20,-34,33,4,17,-22, 
  /* [14][0][][] */ -71,-60,-77,-39,-32,109,2,-68,75,-34,110,-23,121,-28,-127,-103, 
  /* [15][0][][] */ 1,-127,67,-58,-49,-45,16,60,9,-58,-72,-37,97,-40,-12,-30, 
  /* [16][0][][] */ -33,-48,11,-16,24,-15,-16,0,48,-127,28,13,9,-17,-58,-103, 
  /* [17][0][][] */ 20,0,-29,-93,47,44,-57,-14,127,-67,5,36,107,-97,-37,-83, 
  /* [18][0][][] */ 62,34,-52,-102,-3,-12,117,-95,34,72,-49,34,62,51,36,-127, 
  /* [19][0][][] */ -84,-100,0,-52,-102,20,-60,41,62,-24,11,-127,38,11,-46,-55, 
  /* [20][0][][] */ 49,101,92,-67,66,37,-87,100,-121,-115,56,-116,-14,127,-27,-18, 
  /* [21][0][][] */ -24,-127,-91,10,88,51,52,110,-43,-97,-22,31,83,-95,-73,-25, 
  /* [22][0][][] */ 11,9,67,-2,6,39,75,4,20,127,49,55,30,14,122,-36, 
  /* [23][0][][] */ -105,-127,-47,81,39,26,17,0,-40,17,43,-48,7,82,38,85, 
  /* [24][0][][] */ 31,22,77,14,-4,-107,28,-69,49,127,-121,66,-24,-103,93,-68, 
  /* [25][0][][] */ 98,-44,75,125,28,-8,-11,61,-127,43,66,-2,-28,50,72,2, 
  /* [26][0][][] */ -2,34,2,60,-77,127,-6,35,-64,-53,-82,22,4,21,42,-126, 
  /* [27][0][][] */ 59,13,6,-72,-70,-14,-82,11,-100,-31,-79,-68,-85,39,-5,127, 
  /* [28][0][][] */ -76,-27,21,5,35,-37,-127,37,-38,-50,15,16,64,-35,-89,-49, 
  /* [29][0][][] */ -11,-120,-41,71,-38,15,127,12,47,34,-80,36,38,-37,-50,77, 
  /* [30][0][][] */ 18,-74,-90,24,-127,57,31,-49,2,-30,-19,-62,-40,29,-17,97, 
  /* [31][0][][] */ -127,-25,-4,73,-10,48,-55,-23,-21,-32,-6,-10,-30,-56,-17,76, 
  /* [32][0][][] */ -125,-127,-105,12,-101,-3,22,-23,115,31,-36,-78,38,47,0,-3, 
  /* [33][0][][] */ -28,1,-68,35,-121,-98,74,10,-94,4,-40,-22,23,127,59,43, 
  /* [34][0][][] */ 30,55,-30,53,-64,-12,38,-12,11,-127,13,17,-39,10,29,122, 
  /* [35][0][][] */ 32,-4,-77,1,-121,-35,127,10,21,102,20,0,40,125,4,111, 
  /* [36][0][][] */ 49,53,-93,82,127,-72,4,118,-75,13,-60,-113,54,30,46,76, 
  /* [37][0][][] */ -127,44,-22,-68,95,-90,-41,-16,-18,-9,-3,53,49,-37,10,-86, 
  /* [38][0][][] */ 66,88,49,-77,-74,-113,-127,-58,-22,-42,62,58,-63,-85,72,-42, 
  /* [39][0][][] */ -22,-17,-11,63,16,42,116,-38,-45,43,-8,-38,-32,85,29,127, 
  /* [40][0][][] */ 66,59,101,127,-87,-16,4,38,-88,22,-2,-35,-91,-66,113,13, 
  /* [41][0][][] */ -10,-38,27,36,-73,93,-19,49,-42,36,-113,13,35,25,38,-127, 
  /* [42][0][][] */ -6,-63,47,-6,127,48,21,9,11,-54,-97,-43,-30,-23,-12,-18, 
  /* [43][0][][] */ -20,-71,-9,-18,107,26,11,67,-37,-81,-109,-87,127,-46,-51,38, 
  /* [44][0][][] */ -38,-90,-44,-127,-3,106,93,4,-97,-106,-67,73,-111,8,40,77, 
  /* [45][0][][] */ 4,-70,-127,30,-79,97,-31,-71,74,-44,47,-61,36,2,-84,12, 
  /* [46][0][][] */ 13,-100,-38,36,80,-90,-16,127,-20,-51,67,50,-53,-27,47,-114, 
  /* [47][0][][] */ -72,-19,-42,48,25,63,52,24,-18,60,26,44,-44,117,-4,127, 
  /* [48][0][][] */ 39,-9,-72,-69,44,-89,11,72,40,-73,-5,33,-38,19,-33,-127, 
  /* [49][0][][] */ 57,70,-8,56,-10,-7,50,54,-56,127,-20,49,-43,-15,67,73, 
  /* [50][0][][] */ 8,-22,8,33,-127,-8,-35,-87,83,19,17,43,-21,-65,-4,-2, 
  /* [51][0][][] */ -5,-21,-20,-127,1,104,68,-71,3,28,10,-39,72,64,-51,-1, 
  /* [52][0][][] */ 30,-39,9,-79,58,-127,-36,-70,57,-20,119,-84,2,-26,-8,93, 
  /* [53][0][][] */ -31,-63,71,-4,-38,-127,-4,-46,22,60,-54,78,-71,-15,46,-108, 
  /* [54][0][][] */ 121,92,92,-23,-116,-51,-92,-127,22,45,104,78,-48,-57,63,-22, 
  /* [55][0][][] */ -2,28,-21,65,-18,15,54,-2,-8,127,9,46,-14,8,-16,19, 
  /* [56][0][][] */ 62,-114,-87,83,-29,83,9,48,127,3,50,66,-4,-9,37,34, 
  /* [57][0][][] */ 31,-20,97,-121,91,-39,8,30,124,-77,19,127,115,13,117,-65, 
  /* [58][0][][] */ 95,-63,21,-78,55,-9,-13,127,78,106,-7,24,112,43,48,-22, 
  /* [59][0][][] */ -89,50,17,-15,-34,-78,-12,28,-27,26,-105,-127,-90,-87,12,-18, 
  /* [60][0][][] */ 42,-7,30,29,3,-16,-11,-60,22,127,-10,69,-29,-30,-38,-31, 
  /* [61][0][][] */ 34,87,6,-21,-54,-55,12,-103,-77,-40,-3,48,-55,-21,85,127, 
  /* [62][0][][] */ -17,78,-35,0,-48,127,-13,-4,-53,31,-36,-12,11,32,38,-40, 
  /* [63][0][][] */ 44,14,-38,-127,-1,-42,57,-29,18,-65,-42,42,-3,78,45,-47, 
  /* [64][0][][] */ -16,59,4,25,29,-96,-8,127,-120,-31,-61,-53,-25,87,54,72, 
  /* [65][0][][] */ -78,8,-35,-57,35,3,-30,-45,-124,-52,24,-65,-127,108,-47,63, 
  /* [66][0][][] */ -35,42,-4,54,-38,127,-36,17,-76,29,-34,47,-49,48,26,-107, 
  /* [67][0][][] */ -5,7,-5,-34,10,-79,40,-55,0,32,22,127,-53,7,-33,-71, 
  /* [68][0][][] */ 7,-127,4,48,-11,8,27,79,21,40,44,13,-11,40,-15,-52, 
  /* [69][0][][] */ -10,82,27,-107,68,27,-51,70,20,127,60,92,40,-56,3,-52, 
  /* [70][0][][] */ 22,11,22,-23,55,16,-61,-35,-127,-95,7,23,-14,63,-102,18, 
  /* [71][0][][] */ -29,-72,65,-84,61,-46,48,66,-127,104,-116,-74,25,99,3,15, 
  /* [72][0][][] */ 41,56,75,2,-77,-56,-127,-40,28,60,-36,53,42,102,-99,17, 
  /* [73][0][][] */ -14,-40,-29,-7,32,-93,21,-20,64,63,114,-6,49,-5,-82,127, 
  /* [74][0][][] */ -5,-30,-53,116,-110,5,89,49,68,48,53,100,127,-8,-82,13, 
  /* [75][0][][] */ -42,21,-36,26,-47,127,1,19,-45,19,-38,33,-21,37,8,-55, 
  /* [76][0][][] */ -33,92,-32,70,-127,-16,-40,-9,84,45,-71,-72,58,-72,-91,7, 
  /* [77][0][][] */ 122,127,-63,89,49,76,38,54,84,3,63,-18,35,19,55,-7, 
  /* [78][0][][] */ 8,-44,-18,-69,35,-93,24,-36,21,24,83,-29,4,-6,-16,127, 
  /* [79][0][][] */ -64,57,7,26,14,-62,-63,14,-127,-21,19,22,110,45,-118,-40, 
  /* [80][0][][] */ -113,6,73,18,69,101,12,-127,-102,61,-47,-67,-65,-89,-6,85, 
  /* [81][0][][] */ 84,55,-30,-27,45,-9,84,127,-90,100,-60,-24,-13,28,94,111, 
  /* [82][0][][] */ 31,101,-36,-32,-27,-56,97,-1,-13,-1,-17,127,119,25,57,-21, 
  /* [83][0][][] */ 24,-10,37,5,24,0,-37,-58,80,-11,65,34,17,-39,-25,-127, 
  /* [84][0][][] */ -127,-109,-59,-8,-31,95,88,20,55,42,103,63,43,59,-93,28, 
  /* [85][0][][] */ 109,9,111,-64,13,11,-61,127,30,93,-66,-8,-67,21,98,-2, 
  /* [86][0][][] */ -63,86,-17,-19,9,91,17,6,123,53,127,-17,-51,38,-51,-46, 
  /* [87][0][][] */ -6,-79,14,-46,47,-127,61,-33,37,-34,89,-62,40,-34,-66,105, 
  /* [88][0][][] */ -62,51,54,-37,127,-63,24,41,-46,-61,93,-48,59,119,112,-86, 
  /* [89][0][][] */ -9,53,-3,11,-1,127,-27,33,-38,24,-51,43,-23,89,43,-99, 
  /* [90][0][][] */ 43,-102,-2,44,80,20,70,14,-28,-127,-102,-22,14,-7,-87,61, 
  /* [91][0][][] */ 18,46,-22,-1,22,-47,-127,56,-56,22,-85,-79,-71,-105,-22,-9, 
  /* [92][0][][] */ 127,86,102,41,-106,-97,27,-15,-16,66,-48,-16,4,-93,11,-45, 
  /* [93][0][][] */ -40,-127,-90,95,-10,-41,-39,62,86,94,-3,53,-93,74,-30,-50, 
  /* [94][0][][] */ 119,-7,127,2,8,-34,-20,52,68,55,-19,23,23,-12,102,-30, 
  /* [95][0][][] */ -20,-45,-33,-42,127,26,70,44,-40,-13,-78,-50,50,46,-79,43, 
};
const TfArray<96, float> quant19_scale = { 96, { 0.0053086625412106514, 0.0026008521672338247, 0.0037629841826856136, 0.0060428204014897346, 0.0019859275780618191, 0.0014456530334427953, 0.0034232612233608961, 0.0041155708022415638, 0.0011130674974992871, 0.0048828846774995327, 0.00080527807585895061, 0.0018538099247962236, 0.0038203524891287088, 0.0058695659972727299, 0.0017390461871400476, 0.0033755255863070488, 0.0034180718939751387, 0.0025893223937600851, 0.0024495453108102083, 0.0010367691284045577, 0.0029485421255230904, 0.0020511411130428314, 0.0030975763220340014, 0.002773163840174675, 0.0012554245768114924, 0.0026559662073850632, 0.0036977727431803942, 0.0027101591695100069, 0.0022702820133417845, 0.0026098068337887526, 0.001419752836227417, 0.0024154998827725649, 0.0018679910572245717, 0.0013970450963824987, 0.0023534991778433323, 0.0020082637201994658, 0.0024196531157940626, 0.0038400727789849043, 0.0020430078729987144, 0.0024320962838828564, 0.00082277163164690137, 0.0033031089697033167, 0.0036403259728103876, 0.0032021256629377604, 0.0018616385059431195, 0.0010982025414705276, 0.0018884027376770973, 0.001492811948992312, 0.0033456382807344198, 0.0033061059657484293, 0.0036706950049847364, 0.0017437812639400363, 0.0037046123761683702, 0.0034188837744295597, 0.0016271930653601885, 0.0063375718891620636, 0.0027566323988139629, 0.00082468724576756358, 0.0021143879275768995, 0.0031744572333991528, 0.0039413333870470524, 0.0016181295504793525, 0.0051560378633439541, 0.0036772126331925392, 0.0013686504680663347, 0.00083612586604431272, 0.0044959960505366325, 0.0031426816713064909, 0.0029468403663486242, 0.0017110425978899002, 0.0057524903677403927, 0.0020429564174264669, 0.0024657920002937317, 0.0029380603227764368, 0.0032164137810468674, 0.0049126995727419853, 0.0030498187988996506, 0.0012748034205287695, 0.002325892448425293, 0.0027278384659439325, 0.0020124730654060841, 0.002373178256675601, 0.00253870221786201, 0.001427057315595448, 0.001791973365470767, 0.0012153625721111894, 0.0021360153332352638, 0.002978029428049922, 0.0022386605851352215, 0.0035559907555580139, 0.0028683149721473455, 0.0017810167046263814, 0.0022636638022959232, 0.0039080837741494179, 0.0017141120042651892, 0.0018448566552251577, } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data20[16] = { -12107, 3589, -19372, -1273, 12487, -11240, -30271, -12863, -5791, 7131, -16895, -12233, 1272, -8966, -8114, -4253, };
const TfArray<16, float> quant20_scale = { 16, { 0.0001451097778044641, 0.00015603505016770214, 0.00010169004963245243, 0.00011016703501809388, 8.9515327999833971e-05, 0.00014007536810822785, 0.00011186270421603695, 0.00018728533177636564, 9.071217937162146e-05, 0.00011445328709669411, 0.00015664516831748188, 0.00013131843297742307, 0.00014227046631276608, 8.7307853391394019e-05, 0.00012892742233816534, 0.00013924032100476325, } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ 27,24,31,-45,69,77,-39,42,7,127,7,59,-24,27,-6,45,44,92,46,-50,-48,97,-17,35,58,52,31,54,-57,-45,-17,81,-29,-8,-76,63,53,-118,-12,13,17,-12,64,-2,13,-60,-47,-19, 
  /* [1][0][][] */ -39,-17,-68,-57,16,88,-51,7,9,-19,-55,35,72,-29,-14,-12,-37,-39,-6,32,-69,65,-113,-63,-37,-29,61,58,-23,-24,30,-41,21,-68,-42,72,19,-58,127,-18,-11,21,-37,-6,27,44,50,27, 
  /* [2][0][][] */ -8,-18,71,-37,-14,-94,38,10,116,102,-83,7,111,-40,127,98,-98,-31,-60,46,94,-119,-32,-114,32,-23,49,-85,45,45,-59,29,15,-21,68,23,-95,1,14,-26,41,24,48,-30,11,-110,102,-74, 
  /* [3][0][][] */ 37,-14,-28,-28,15,120,24,-32,55,-33,19,-25,-57,12,13,49,-40,-65,44,-112,-17,6,-33,-33,-27,107,127,51,-29,-32,21,27,53,-40,78,47,-39,-53,-5,45,39,14,-24,1,15,13,-8,-22, 
  /* [4][0][][] */ 92,-15,4,-37,73,67,48,15,56,-5,-100,19,36,-17,27,-18,-92,-111,-16,-98,-16,22,-30,-9,-91,127,-117,123,-49,-56,26,79,31,-33,23,-42,16,11,-13,20,-56,-18,12,67,-56,107,-51,-65, 
  /* [5][0][][] */ 9,-8,-66,13,-17,58,14,-24,77,51,44,76,43,-7,38,-3,-51,127,-26,27,3,-5,-55,-3,38,-12,-59,-44,-10,31,28,-5,-57,-12,49,29,-53,2,-111,2,94,-22,16,48,-31,19,-50,31, 
  /* [6][0][][] */ 51,15,4,83,-3,-34,101,-26,-25,50,124,76,27,52,-58,52,21,-33,-52,71,54,-74,-23,68,-96,63,67,-3,127,32,-21,9,78,-53,-101,-24,87,16,4,-6,-7,65,51,-42,77,121,8,-16, 
  /* [7][0][][] */ -96,-11,-9,15,-54,-64,21,53,81,121,-63,-55,-81,-1,-13,-3,-68,88,8,121,-61,41,20,26,-10,-68,-24,-76,20,37,-18,-4,-7,33,-1,-27,19,-63,127,20,16,53,31,-10,55,60,-16,7, 
  /* [8][0][][] */ -12,-93,59,-41,44,-43,84,-48,-10,-116,39,14,-43,17,23,35,1,16,-41,78,8,52,-24,33,73,-1,-58,-40,-127,-22,-36,-96,7,-69,5,79,-11,35,90,28,13,-9,50,104,-19,-50,-51,77, 
  /* [9][0][][] */ 35,-33,17,-66,21,70,-38,50,38,-36,-18,0,18,-24,94,-31,22,-101,50,37,-74,57,41,-31,-27,-89,-24,69,58,102,-23,-41,-65,35,-2,127,-3,-29,-65,-30,-19,-13,19,111,43,68,-66,1, 
  /* [10][0][][] */ -16,20,-22,-8,25,34,-52,-62,47,35,58,-15,-36,1,57,-62,-69,127,-9,40,14,-6,26,29,-53,38,-4,89,29,6,-30,2,64,7,-7,28,-20,-31,-31,13,-73,2,32,-3,14,49,29,28, 
  /* [11][0][][] */ -31,30,-18,35,39,61,16,-2,4,22,-127,-83,58,25,9,-44,-16,26,-61,-49,-14,-23,110,11,38,20,-21,29,2,28,-1,54,19,-18,-37,-16,28,79,95,10,32,-19,47,8,-55,-13,84,3, 
  /* [12][0][][] */ -71,1,41,16,-77,-43,6,4,-20,-21,-127,22,65,-104,8,37,52,103,85,-109,-28,58,-48,-79,11,-4,36,-35,-17,7,-29,61,73,91,33,-26,-46,-31,39,12,-26,35,59,-16,47,-17,-39,-28, 
  /* [13][0][][] */ -69,-113,-37,-100,0,11,50,19,-127,40,97,-46,49,31,96,20,116,11,-4,-73,55,-100,94,-11,-93,18,-27,4,-15,-85,-110,3,28,7,-78,37,29,-68,93,-50,-15,81,61,18,62,-37,109,-76, 
  /* [14][0][][] */ 51,6,-39,-9,-33,14,-62,-34,-15,69,40,49,-4,-74,21,-32,42,-105,16,19,75,-44,14,-23,-3,127,-80,5,-55,-20,-91,-8,116,36,71,-21,-73,9,-14,63,2,-27,94,-14,-41,-46,-37,47, 
  /* [15][0][][] */ -64,24,37,15,78,11,-4,36,16,60,-6,62,57,-16,-53,-25,23,47,18,-31,26,-33,-53,-51,59,-77,-22,62,-32,4,30,-5,-41,14,127,-21,-81,28,56,-10,-41,-18,9,-14,-30,-35,-9,14, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.006167165469378233, 0.0066314893774688244, 0.0043218270875513554, 0.0046820989809930325, 0.0038044014945626259, 0.0059532029554247856, 0.0047541647218167782, 0.0079596266150474548, 0.0038552675396203995, 0.0048642647452652454, 0.0066574197262525558, 0.0055810334160923958, 0.00604649493470788, 0.003710583783686161, 0.005479415412992239, 0.0059177135117352009, } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data22[48] = { 11126, -166, 13331, 164, 13608, -1941, 29884, 313, 7709, 48812, 10999, 19972, 7113, 11871, 45435, 15686, 1748, 6704, -2697, 46057, 1652, 20280, -22, 14411, 15232, 48939, 151, -1077, 620, 11136, 21093, -121, 1578, -3682, 2815, 13078, 11333, 26404, 2550, 10635, 25209, 6907, 1095, 11693, 2588, 5150, 26152, 19973, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 8.1525497080292553e-05, 0.00016724328452255577, 8.1379119365010411e-05, 0.00013981618394609541, 0.00012863830488640815, 0.00010406043293187395, 7.9835888755042106e-05, 0.00032003308297134936, 0.00011005820124410093, 4.0794875530991703e-05, 3.7037545553175732e-05, 0.00010102382657350972, 4.8081768909469247e-05, 8.2806305726990104e-05, 3.2478008506586775e-05, 0.00011876775533892214, 7.8746772487647831e-05, 5.6123197282431647e-05, 0.0002026056608883664, 4.1154999053105712e-05, 6.4858570112846792e-05, 6.928470975253731e-05, 0.00015517730207648128, 8.987513865577057e-05, 7.8093267802614719e-05, 4.5944427256472409e-05, 7.4729628977365792e-05, 5.8823512517847121e-05, 0.00032705074409022927, 0.00013877860328648239, 6.7864806624129415e-05, 0.0002740842173807323, 0.00010295335232513025, 0.00019078208424616605, 8.0007856013253331e-05, 7.995141641004011e-05, 9.9193282949272543e-05, 6.9610614445991814e-05, 0.00010569376172497869, 8.5302141087595373e-05, 6.4883373852353543e-05, 0.00016411632532253861, 0.00024209987896028906, 9.4829905719961971e-05, 0.00017210481746587902, 4.007298412034288e-05, 6.5634383645374328e-05, 6.9982903369236737e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ -127,82,-127,85,-54,46,-49,110,-55,-87,94,-23,57,-53,-102,1,110,75,113,-55,75,-94,70,-52,-95,-111,62,89,-108,-71,-80,94,75,-68,88,-126,-56,-127,120,-30,-39,-127,75,-115,85,86,-32,-31, -90,29,-86,108,-67,127,-52,113,-127,-91,125,-32,76,-49,-44,-83,85,96,127,-127,84,-107,90,-109,-127,-108,100,127,40,-81,-89,72,72,-105,112,-121,-127,-99,81,-70,-100,58,91,-127,-56,127,-59,-46, -81,46,-11,13,-27,65,-35,53,-35,-61,66,-6,12,-37,-29,-35,39,32,55,-12,13,-127,27,-73,-104,-70,16,74,80,-36,-21,-51,0,-89,28,4,-13,-5,35,-32,-114,-25,4,-23,-81,43,5,-57, 
  /* [0][1][][] */ -52,97,-51,104,-78,108,-127,127,-85,-127,85,-60,127,-123,-127,-65,127,61,-41,-112,98,-81,64,-68,-72,-127,69,99,-127,-52,-127,84,101,71,97,1,-63,-107,127,-72,-126,-124,127,-114,127,103,-106,-39, -120,127,-105,127,-127,97,-119,98,-80,-107,127,-127,122,-127,-79,-127,99,127,-40,-89,127,-81,127,-127,-73,-108,127,88,7,-127,-96,117,127,46,127,-127,-110,-82,99,-127,-127,88,93,-93,-67,124,-127,-69, -96,46,-50,35,-44,5,-49,2,-58,-57,85,-53,26,-78,-79,-19,77,45,-35,-25,52,-76,53,-26,-74,-36,18,48,66,-52,-74,-33,36,-42,86,-50,-56,2,72,-46,-29,-65,14,-20,-99,79,1,-75, 
  /* [0][2][][] */ -70,90,44,28,-60,39,-26,74,-60,-53,48,-65,66,-65,-49,-5,64,39,-27,-45,22,-17,32,-72,-51,-63,39,-9,-50,-51,-63,127,42,95,29,-39,-49,-52,17,4,-59,-58,51,-26,79,28,-21,-48, -23,85,-65,29,-68,36,-75,5,-11,-39,31,-61,79,-47,-68,2,82,40,-50,8,12,-73,35,-68,-37,-77,89,35,8,-50,-81,56,62,127,23,-103,-81,-65,21,-46,-47,37,79,-50,-31,54,-16,-127, 3,74,-22,28,35,7,-37,85,-7,27,61,-40,2,-7,-64,18,30,21,-27,40,8,-11,38,15,-24,7,33,-19,52,-6,-64,-26,49,38,48,36,-63,-14,-9,-2,8,-23,41,10,-65,58,42,-46, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0034648336004465818, 0.0071078394539654255, 0.0034586123656481504, 0.005942187737673521, 0.0054671280086040497, 0.0044225682504475117, 0.0033930251374840736, 0.013601405546069145, 0.0046774735674262047, 0.0017337821191176772, 0.001574095687828958, 0.0042935125529766083, 0.0020434751641005278, 0.0035192680079489946, 0.0013803152833133936, 0.0050476295873522758, 0.0033467377070337534, 0.002385235857218504, 0.0086107403039932251, 0.0017490873578935862, 0.0027564892079681158, 0.0029446000698953867, 0.006595035083591938, 0.0038196933455765247, 0.0033189638052135706, 0.0019526381511241198, 0.0031760090496391058, 0.0024999992456287146, 0.013899656012654305, 0.0058980905450880527, 0.0028842540923506021, 0.011648578569293022, 0.0043755173683166504, 0.0081082386896014214, 0.0034003336913883686, 0.0033979350700974464, 0.0042157145217061043, 0.0029584511648863554, 0.0044919848442077637, 0.0036253409925848246, 0.0027575432322919369, 0.0069749434478580952, 0.01028924435377121, 0.0040302709676325321, 0.0073144547641277313, 0.0017031017923727632, 0.0027894612867385149, 0.0029742734041064978, } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&g0::quant22_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data24[48] = { 1114, -1499, 268, -2111, 5282, -431, 4007, -3388, 1172, 927, 2559, 5427, 380, -285, 350, 4059, -1492, 3162, 3703, 564, -237, 2146, -1534, 3713, 2054, 1110, 753, -673, 6505, -485, 3030, -1685, -441, 4356, -732, 1688, 1699, 1345, 305, 2587, 1970, 5596, -3544, 917, 6026, 473, 1506, 2031, };
const TfArray<48, float> quant24_scale = { 48, { 0.00031000335002318025, 0.00030284546664915979, 0.00028237127116881311, 0.00023400869395118207, 0.00016616076754871756, 0.00029061600798740983, 0.00020399288041517138, 0.0001644577132537961, 0.00027238833718001842, 0.00026168127078562975, 0.00016638670058455318, 0.00014974658552091569, 0.0004263395385351032, 0.00031840725569054484, 0.00028190438752062619, 0.00019255380902905017, 0.00029940350214019418, 0.00025169801665470004, 0.00022392925166059285, 0.0003983769565820694, 0.00049597275210544467, 0.00026139619876630604, 0.00018656686006579548, 0.00022636634821537882, 0.00027777958894148469, 0.00030829713796265423, 0.00041422178037464619, 0.00036723862285725772, 0.00013461823982652277, 0.00021521425514947623, 0.00015779792738612741, 0.00014835399633739144, 0.00026531677576713264, 0.00017480133101344109, 0.00028690529870800674, 0.00024861027486622334, 0.00029652428929693997, 0.00025078892940655351, 0.00027543958276510239, 0.00026905428967438638, 0.00031640403904020786, 0.00015219913620967418, 0.00013573927571997046, 0.00036002375418320298, 0.00014168338384479284, 0.00035448212292976677, 0.000321100844303146, 0.00027431122725829482, } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ 48,31,127,-28,79,92,-58,-34, 
  /* [1][0][][] */ 25,-74,-127,11,34,30,13,7, 
  /* [2][0][][] */ -127,-33,-66,-54,71,70,-94,-58, 
  /* [3][0][][] */ 34,47,127,-56,-35,-125,-19,-19, 
  /* [4][0][][] */ -127,20,-59,-39,73,-9,-60,-51, 
  /* [5][0][][] */ -85,21,-65,-11,10,41,-85,-127, 
  /* [6][0][][] */ -25,-123,-127,42,96,10,-18,31, 
  /* [7][0][][] */ -50,-127,-88,-84,-63,-77,27,72, 
  /* [8][0][][] */ 106,31,-25,5,105,-86,-127,3, 
  /* [9][0][][] */ -47,71,-48,118,-80,-62,127,-18, 
  /* [10][0][][] */ -43,127,40,78,118,-49,1,70, 
  /* [11][0][][] */ -64,-47,-36,-15,-92,123,127,-10, 
  /* [12][0][][] */ 71,37,-127,37,-15,-38,-62,-11, 
  /* [13][0][][] */ 85,-41,-99,14,5,-127,-54,-43, 
  /* [14][0][][] */ 22,-58,55,31,127,-93,-66,35, 
  /* [15][0][][] */ -25,-39,-10,127,54,97,-73,34, 
  /* [16][0][][] */ 107,19,-42,11,71,-89,-127,-8, 
  /* [17][0][][] */ 48,127,57,75,27,51,22,-73, 
  /* [18][0][][] */ 39,-11,8,0,127,10,27,2, 
  /* [19][0][][] */ 7,127,23,20,-91,10,9,-30, 
  /* [20][0][][] */ -45,-11,80,-127,9,26,-29,107, 
  /* [21][0][][] */ -33,60,78,-123,32,15,-7,127, 
  /* [22][0][][] */ -52,-63,-81,30,-117,127,98,1, 
  /* [23][0][][] */ 94,33,-127,8,35,-44,-94,-28, 
  /* [24][0][][] */ -51,37,24,-6,-38,65,-127,73, 
  /* [25][0][][] */ -101,-56,-127,16,-47,-81,78,100, 
  /* [26][0][][] */ 42,-5,-47,-37,100,-21,127,-47, 
  /* [27][0][][] */ 127,-71,21,98,0,55,-28,70, 
  /* [28][0][][] */ 63,49,65,-11,127,-90,42,-63, 
  /* [29][0][][] */ -1,-26,-45,-60,-104,10,127,-61, 
  /* [30][0][][] */ 50,-105,-41,-59,-127,-6,10,-32, 
  /* [31][0][][] */ 21,14,-17,-23,-127,16,-23,-23, 
  /* [32][0][][] */ 53,-64,-40,62,-19,-65,87,-127, 
  /* [33][0][][] */ 26,127,53,10,77,-24,-35,-46, 
  /* [34][0][][] */ -127,-44,103,-6,-1,117,105,-6, 
  /* [35][0][][] */ -32,78,127,-17,-39,-104,-62,46, 
  /* [36][0][][] */ -92,1,94,-26,-25,127,82,15, 
  /* [37][0][][] */ -7,-82,-25,-127,-30,-56,40,18, 
  /* [38][0][][] */ 57,-14,85,-67,61,76,-127,3, 
  /* [39][0][][] */ -9,84,-127,-47,7,-6,6,83, 
  /* [40][0][][] */ 81,-62,-2,33,16,9,-5,127, 
  /* [41][0][][] */ -40,71,127,-25,39,56,-38,9, 
  /* [42][0][][] */ 34,-127,-83,-15,-104,26,27,-99, 
  /* [43][0][][] */ 9,-67,26,-66,127,-57,-7,36, 
  /* [44][0][][] */ -8,118,127,19,9,43,-63,14, 
  /* [45][0][][] */ -38,44,15,101,-127,47,-118,25, 
  /* [46][0][][] */ -30,-28,39,44,-127,-94,-30,-16, 
  /* [47][0][][] */ -28,80,64,-107,-127,25,-52,107, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0032280860468745232, 0.0031535504385828972, 0.0029403511434793472, 0.0024367484729737043, 0.001730243326164782, 0.0030262041836977005, 0.002124191727489233, 0.0017125093145295978, 0.0028363980818539858, 0.0027249047998338938, 0.0017325959634035826, 0.0015593214193359017, 0.0044395024888217449, 0.0033155963756144047, 0.0029354896396398544, 0.002005075803026557, 0.0031177089549601078, 0.0026209484785795212, 0.0023317905142903328, 0.0041483263485133648, 0.0051645981147885323, 0.0027219362091273069, 0.0019427334191277623, 0.00235716812312603, 0.0028925377409905195, 0.00321031897328794, 0.004313319455832243, 0.0038240808062255383, 0.0014017887879163027, 0.0022410405799746513, 0.001643160474486649, 0.0015448202611878514, 0.0027627616655081511, 0.0018202181672677398, 0.0029875643085688353, 0.0025887957308441401, 0.0030877275858074427, 0.0026114822831004858, 0.0028681710828095675, 0.0028016807045787573, 0.0032947368454188108, 0.0015848599141463637, 0.0014134623343124986, 0.0037489517126232386, 0.0014753587311133742, 0.0036912462674081326, 0.0033436447847634554, 0.0028564215172082186, } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data26[8] = { -340, -3899, 29723, -9655, 3264, -12138, 5230, -11255, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 7.1979397034738213e-05, 0.00010150770685868338, 0.00011447304859757423, 0.00010576835484243929, 0.00010986014967784286, 0.00014061779074836522, 7.7425291237886995e-05, 8.8284919911529869e-05, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -31,-40,-8,-92,22,-16,85,69,-86,-72,-28,1,-38,20,-60,42,-82,15,-9,127,55,-15,0,104,96,92,11,5,-75,-52,-91,-57,-54,110,37,-29,3,-23,89,-24,44,14,7,-104,51,-45,-14,-86, 
  /* [1][0][][] */ -25,63,-11,-16,-72,36,-32,-32,-22,60,-4,15,52,24,-36,14,-27,-101,81,-54,127,9,-49,18,50,-6,-55,49,37,-7,68,29,-24,-11,4,-7,-11,114,-27,-19,73,24,4,29,108,27,-32,72, 
  /* [2][0][][] */ -35,-25,122,10,80,-59,-24,40,-28,-6,-3,49,19,-47,-50,-127,-75,-104,-39,8,-124,7,-65,-28,-36,18,8,-63,-37,0,-26,-13,-4,-1,24,-4,24,-40,-60,22,21,-50,24,-41,-40,-64,-73,-52, 
  /* [3][0][][] */ 31,24,64,26,47,-18,11,72,-38,-18,57,-9,-67,57,-12,64,84,38,-19,48,-96,-71,127,-12,10,-7,-57,-40,-26,63,108,-53,-11,-97,-21,36,-38,-60,-10,36,-67,-46,63,-8,-78,-50,58,6, 
  /* [4][0][][] */ 15,-3,92,-48,-11,-19,5,-10,-62,4,-11,-10,57,-76,47,-114,37,44,-21,-36,24,41,25,-2,3,17,59,-6,26,29,-127,-11,-13,-9,21,27,56,-3,31,14,-18,-16,-70,59,-8,-117,2,29, 
  /* [5][0][][] */ 34,-47,50,30,50,17,14,-2,-85,1,-74,25,29,-9,2,-36,85,80,11,-27,84,-80,127,-91,-30,58,-6,56,19,13,-32,-66,-28,-51,-61,24,40,45,66,1,-97,44,33,25,36,-14,66,1, 
  /* [6][0][][] */ -55,52,-127,94,35,-4,6,10,-29,-32,77,-72,-116,-26,-18,23,-122,42,-21,83,20,27,-93,-99,-18,-27,15,76,-28,-11,-67,6,28,78,-51,-15,-4,-3,79,-15,72,73,-102,-85,-29,119,-62,-55, 
  /* [7][0][][] */ 35,79,-71,23,-5,59,127,80,46,61,-101,5,-37,9,-53,-43,36,23,111,88,63,12,86,4,110,93,-40,63,-81,49,10,-69,36,-53,-33,29,19,70,-45,85,-72,47,-14,-90,51,-1,71,-39, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.0030591243412345648, 0.00431407755240798, 0.0048651043325662613, 0.0044951550662517548, 0.00466905627399683, 0.0059762559831142426, 0.0032905747648328543, 0.003752108896151185, } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data28[48] = { -455, 16641, -374, -475, -1523, -428, -263, -2429, -3998, 353, -12696, -88, -1157, 274, 1316, 1614, 3086, 3341, 203, -2500, -4815, -1057, 19634, -1473, 3881, -950, 8294, -3671, 5342, -4558, -7964, 5326, 6866, 1620, 5059, -421, 361, -190, 10410, 312, 3305, -1335, 2027, 5764, 675, 8144, 1177, 3561, };
const TfArray<48, float> quant28_scale = { 48, { 0.00035837371251545846, 0.00014112048665992916, 0.0011509560281410813, 0.00017649684741627425, 0.00036638689925894141, 0.00051334453746676445, 0.00032573784119449556, 0.00033675230224616826, 8.5628074884880334e-05, 0.00033275008900091052, 8.5588901129085571e-05, 0.0013751223450526595, 0.00057149073109030724, 0.00061858334811404347, 0.00046969237155281007, 0.00097654422279447317, 0.00034507110831327736, 6.4910549554042518e-05, 0.00050093757454305887, 0.0003832441580016166, 0.00025471491971984506, 0.00031127023976296186, 7.0524067268706858e-05, 0.00045277582830749452, 0.00022393801191356033, 0.00058437691768631339, 0.00035228670458309352, 0.00024166784714907408, 0.00015218781481962651, 0.00026508045266382396, 0.00020024237164761871, 0.00015302706742659211, 0.00013764122559223324, 0.00024101811868604273, 0.00016077805776149035, 0.00038775920984335244, 0.001467930618673563, 0.00043586594983935356, 0.00012990755203645676, 0.00027579852030612528, 0.00021313676552381366, 0.00015029404312372208, 0.00024102350289467722, 0.00026563118444755673, 0.00028437506989575922, 8.3647842984646559e-05, 9.6694478997960687e-05, 0.00024225297966040671, } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 11,-54,6,17,-6,-115,-31,65,-23,-17,19,10,41,-29,-35,19,91,1,13,6,-12,8,-60,9,-33,-22,-19,-39,-117,76,4,-127,36,-9,-64,-49,-24,-36,11,5,-10,64,22,5,-26,62,127,-4, -127,-68,-26,127,-50,49,-83,127,35,25,36,-2,61,13,-12,-29,-52,34,9,23,4,127,26,127,105,-35,-66,20,46,-83,6,-110,47,-16,-41,-116,11,6,-66,-54,-112,-19,-89,-127,22,80,53,61, -33,-27,8,20,-16,-19,39,27,3,-33,24,9,-2,-29,-15,1,-82,29,-63,-28,5,-2,127,15,-55,7,-13,7,2,52,28,56,-23,-20,-56,78,0,1,21,48,16,-31,27,-44,-20,52,-49,-49, 
  /* [0][1][][] */ -13,-50,-30,4,35,-127,127,-70,2,0,59,36,127,4,-18,-30,-19,-17,23,34,42,-66,54,-4,-89,127,-84,-34,117,-65,27,-125,-67,-2,-59,20,3,-67,-33,19,127,127,-4,-122,-75,-50,-17,67, 104,-127,127,-6,127,62,-55,-56,38,127,127,-127,-100,127,127,127,127,127,127,127,127,86,9,-9,96,-99,-127,109,26,127,127,32,-127,127,127,127,-127,127,-127,-87,59,20,-127,-4,127,-127,-15,43, 15,7,-41,1,-38,113,-102,72,98,-79,51,66,-14,-5,-1,-66,16,18,-125,-3,29,-98,-26,-13,56,-8,-28,127,-103,-12,9,-1,-49,8,88,-33,29,-2,8,-88,106,-17,24,54,-56,108,65,-89, 
  /* [0][2][][] */ -11,-13,2,-17,2,-62,-11,22,4,-10,40,0,-22,-48,-26,7,-57,17,0,-35,-12,-13,88,-22,-127,4,35,-46,-11,10,18,44,-34,-16,-68,35,-12,-4,16,55,-24,-3,5,8,-27,28,-46,6, 47,-38,-36,-25,32,58,118,-87,127,-46,13,0,-79,-48,-43,-52,-36,97,23,17,-2,28,0,-38,-82,66,76,-45,-127,24,3,7,-13,-13,-54,8,39,-33,-2,127,-108,-5,-6,69,35,43,-7,-127, -3,-1,2,-14,-11,-9,-1,-41,-39,-31,21,-1,28,-44,-23,25,57,10,-16,-40,5,-10,-38,-31,6,-15,16,0,-40,11,1,19,40,-30,-25,-71,-9,6,12,-21,-4,-23,12,6,-17,5,46,-49, 
};
const TfArray<48, float> quant29_scale = { 48, { 0.015230881981551647, 0.0059976205229759216, 0.048915628343820572, 0.0075011160224676132, 0.015571442432701588, 0.021817142143845558, 0.013843857683241367, 0.014311972074210644, 0.0036391930188983679, 0.014141878113150597, 0.0036375282797962427, 0.058442696928977966, 0.024288356304168701, 0.026289790868759155, 0.019961925223469734, 0.041503127664327621, 0.014665521681308746, 0.0027586983051151037, 0.021289845928549767, 0.016287876293063164, 0.01082538440823555, 0.013228985480964184, 0.0029972726479172707, 0.019242972135543823, 0.0095173651352524757, 0.024836018681526184, 0.014972184784710407, 0.010270883329212666, 0.0064679821953177452, 0.011265918612480164, 0.0085103008896112442, 0.0065036499872803688, 0.0058497521094977856, 0.010243269614875317, 0.0068330671638250351, 0.016479765996336937, 0.062387049198150635, 0.018524302169680595, 0.0055210711434483528, 0.011721436865627766, 0.0090583125129342079, 0.0063874968327581882, 0.010243498720228672, 0.011289325542747974, 0.012085939757525921, 0.0035550333559513092, 0.004109515342861414, 0.010295751504600048, } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&g0::quant22_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data30[48] = { 3407, 7571, 24628, 844, 2182, -2197, 5661, 15814, 4097, -1054, 3021, -1618, 17854, -1235, 2443, 16800, -608, 3647, 68, 4071, 3108, 3669, 726, 21577, 4273, 4419, 14309, 1533, 5800, 5173, 440, 781, 420, 918, -76, 292, -2202, -320, 2112, 1838, 3815, 2320, 2430, 6194, 5246, 4229, 1142, 7757, };
const TfArray<48, float> quant30_scale = { 48, { 0.00019681864068843424, 0.00012387317838147283, 4.2267674871254712e-05, 0.00025657840888015926, 0.00022602398530580103, 0.00020166949252597988, 0.0001396720326738432, 6.5469947003293782e-05, 0.00013983857934363186, 0.0002166728227166459, 0.00019705870363395661, 0.00024453600053675473, 5.0615166401257738e-05, 0.0002771844738163054, 0.00022933750005904585, 5.8044130128109828e-05, 0.00022304634330794215, 0.00014979152183514088, 0.00031360978027805686, 0.000153916742419824, 0.00018708482093643397, 0.00021642264619003981, 0.00038820228655822575, 4.9588546971790493e-05, 0.00018239358905702829, 0.0001377098960801959, 7.3163369961548597e-05, 0.00028709569596685469, 0.00012699421495199203, 0.00015354545030277222, 0.00062019616598263383, 0.00053875369485467672, 0.0003266605781391263, 0.00033549332874827087, 0.00034735078224912286, 0.0002546092146076262, 0.00022190970776136965, 0.00028245622524991632, 0.00024390859471168369, 0.0002749600971583277, 0.00020932160259690136, 0.00022630392049904913, 0.00027600210160017014, 0.00014924217248335481, 0.00013681677228305489, 0.0001961097150342539, 0.00052917335415259004, 0.00010053819278255105, } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 87,127,-81,-99,32,89,28,13, 
  /* [1][0][][] */ 40,-56,75,-127,-72,86,-69,-30, 
  /* [2][0][][] */ -57,119,127,44,122,12,71,20, 
  /* [3][0][][] */ 102,72,-67,92,-11,-120,-127,-49, 
  /* [4][0][][] */ -15,4,-13,-77,-36,90,127,30, 
  /* [5][0][][] */ -1,57,-127,-86,66,92,31,-46, 
  /* [6][0][][] */ -4,127,40,43,75,5,38,-76, 
  /* [7][0][][] */ 127,-4,-14,44,23,1,89,38, 
  /* [8][0][][] */ 67,107,45,70,127,55,74,-79, 
  /* [9][0][][] */ 15,127,-116,-103,33,81,-5,85, 
  /* [10][0][][] */ -86,-21,65,-17,-2,-67,-69,127, 
  /* [11][0][][] */ -16,-127,-84,-12,30,-29,29,-17, 
  /* [12][0][][] */ -32,-99,-127,-34,-122,46,-70,15, 
  /* [13][0][][] */ 10,11,-121,83,-127,-3,-6,-15, 
  /* [14][0][][] */ -95,-40,-127,4,47,-5,-12,-66, 
  /* [15][0][][] */ 28,-104,-127,-5,-82,0,4,-29, 
  /* [16][0][][] */ 127,-66,-36,69,-86,34,39,97, 
  /* [17][0][][] */ -14,127,120,-14,-48,-3,-48,-42, 
  /* [18][0][][] */ 12,-127,41,59,-5,-27,71,-65, 
  /* [19][0][][] */ 127,-35,-72,45,-95,29,39,74, 
  /* [20][0][][] */ -43,-127,101,99,-7,-105,-2,-77, 
  /* [21][0][][] */ -17,-20,12,-21,127,-7,33,26, 
  /* [22][0][][] */ -127,26,-74,52,37,43,-90,-126, 
  /* [23][0][][] */ -87,-44,64,-1,-127,109,114,-26, 
  /* [24][0][][] */ -68,90,13,-32,-54,127,85,5, 
  /* [25][0][][] */ -28,-78,-127,-48,-53,1,15,-57, 
  /* [26][0][][] */ -14,80,-6,127,-86,25,-67,35, 
  /* [27][0][][] */ 19,-127,24,77,13,-69,0,-108, 
  /* [28][0][][] */ 4,84,48,42,127,-10,28,-58, 
  /* [29][0][][] */ 127,25,-25,-7,63,-89,-89,44, 
  /* [30][0][][] */ 13,-10,23,-127,24,-36,28,-12, 
  /* [31][0][][] */ 37,-26,4,55,2,31,10,127, 
  /* [32][0][][] */ -80,-41,33,-49,-43,127,92,85, 
  /* [33][0][][] */ -28,32,27,-36,23,127,-111,49, 
  /* [34][0][][] */ 27,127,-46,-33,28,26,-46,45, 
  /* [35][0][][] */ 15,-126,35,39,-24,-85,59,-127, 
  /* [36][0][][] */ -22,-42,-62,-8,-127,-35,8,13, 
  /* [37][0][][] */ -59,-127,83,98,-36,-86,-3,-41, 
  /* [38][0][][] */ -82,7,72,-83,-122,-127,-61,104, 
  /* [39][0][][] */ 72,-127,78,36,7,-47,16,-96, 
  /* [40][0][][] */ -7,54,13,41,-127,-33,-71,21, 
  /* [41][0][][] */ 67,127,-86,-106,64,-14,-29,29, 
  /* [42][0][][] */ -15,-45,-14,5,127,14,20,20, 
  /* [43][0][][] */ 127,29,82,12,-73,-24,55,110, 
  /* [44][0][][] */ 42,27,6,4,84,-127,-116,34, 
  /* [45][0][][] */ 51,11,13,15,52,-127,-26,-48, 
  /* [46][0][][] */ 57,-35,-10,127,42,39,4,55, 
  /* [47][0][][] */ -110,-94,103,106,-102,-20,127,-113, 
};
const TfArray<48, float> quant31_scale = { 48, { 0.0029061851091682911, 0.0018290868028998375, 0.00062411610269919038, 0.0037885857746005058, 0.0033374254126101732, 0.0029778117313981056, 0.0020623696036636829, 0.00096671626670286059, 0.0020648287609219551, 0.0031993479933589697, 0.0029097297228872776, 0.0036107699852436781, 0.00074737350223585963, 0.0040928511880338192, 0.0033863519784063101, 0.00085706810932606459, 0.0032934581395238638, 0.0022117919288575649, 0.0046306997537612915, 0.0022727041505277157, 0.0027624573558568954, 0.0031956539023667574, 0.0057321181520819664, 0.00073221465572714806, 0.002693187678232789, 0.00203339708968997, 0.0010803157929331064, 0.0042391982860863209, 0.0018751713214442134, 0.002267221687361598, 0.0091576939448714256, 0.0079551301896572113, 0.0048234052956104279, 0.0049538281746208668, 0.005128912627696991, 0.0037595091853290796, 0.0032766747754067183, 0.0041706925258040428, 0.0036015058867633343, 0.0040600062347948551, 0.0030908014159649611, 0.0033415588550269604, 0.0040753921493887901, 0.0022036803420633078, 0.0020202093292027712, 0.0028957172762602568, 0.0078136688098311424, 0.0014845270197838545, } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data32[8] = { 8406, 9469, -5238, 4107, -1593, 9841, -11043, -19109, };
const TfArray<8, float> quant32_scale = { 8, { 0.00019693413923960179, 0.00012071313540218398, 0.00013323330495040864, 0.00011183098104083911, 0.00020836332987528294, 0.00020126196614000946, 0.00020139229309279472, 0.00011214112601010129, } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -32,-6,44,14,-40,-15,10,3,-39,-8,-64,-55,-30,-53,-8,-37,47,-40,30,36,-16,29,-38,16,-2,-36,46,-13,-14,-16,14,6,70,37,40,-127,19,-5,-24,-22,-5,-20,34,46,37,12,21,7, 
  /* [1][0][][] */ -14,39,51,-10,-11,45,-38,-13,14,32,-1,-88,20,99,-13,65,-7,22,-26,-74,21,-68,-22,27,-78,-6,4,-121,-24,-9,42,-45,45,78,-38,17,127,-20,13,40,-29,50,-68,-32,121,-39,-34,-18, 
  /* [2][0][][] */ -25,-21,-65,37,-5,49,30,11,1,47,1,41,50,-96,18,-52,42,-110,19,33,-8,51,3,32,-22,70,-29,-83,18,9,16,-73,-50,-95,42,-23,104,10,-9,-81,3,52,103,31,127,5,8,33, 
  /* [3][0][][] */ 9,5,-62,42,5,-34,-61,-91,20,-10,-27,-6,12,34,46,87,2,2,-29,17,7,-106,20,-67,-58,-1,127,-22,-28,7,-72,16,6,-76,21,-5,-10,-39,-34,87,-39,-38,12,26,45,-9,-29,27, 
  /* [4][0][][] */ -36,-45,-8,19,33,-27,-13,-11,32,-36,62,-77,11,33,3,13,-13,-30,16,-17,1,-52,9,-12,7,-14,42,51,39,25,-11,31,-17,-8,3,9,-74,82,45,-31,30,-9,-20,-21,-79,20,127,16, 
  /* [5][0][][] */ 55,-30,1,2,25,-62,21,-127,27,-30,-18,118,-91,60,29,-77,-7,-98,0,-1,-45,60,-52,-55,-68,78,-35,-9,-20,39,-30,-49,22,59,26,-9,-53,-12,-58,-42,15,-45,-58,-10,-46,72,89,19, 
  /* [6][0][][] */ 56,-26,26,-17,-40,-19,-29,25,-38,7,-43,127,-47,-37,-10,50,15,52,0,34,33,-85,-27,11,27,36,-70,11,8,-39,9,40,0,12,-22,-8,15,-6,-2,1,-14,-18,36,62,-7,-36,67,-9, 
  /* [7][0][][] */ -35,10,5,62,38,34,4,41,26,5,85,-18,119,120,61,56,64,44,-30,-9,37,-17,-84,-23,16,-2,-25,66,46,-19,-46,-14,46,-8,25,-115,-76,43,41,56,-26,29,88,127,-70,-16,-109,73, 
};
const TfArray<8, float> quant33_scale = { 8, { 0.0083697009831666946, 0.0051303082145750523, 0.0056624151766300201, 0.0047528166323900223, 0.0088554415851831436, 0.0085536334663629532, 0.0085591720417141914, 0.0047659976407885551, } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data34[48] = { 9486, 3720, 2697, 1511, 497, 418, -835, 27128, -1379, 209, 4199, 64076, 2914, 7658, 155, 16495, -1656, 16176, 4565, 9580, 10446, -562, 4419, -6928, 12282, 3090, 10897, 14383, 934, -7915, -11667, 7635, 3216, 1400, -725, 2449, -7753, 16611, 535, 17964, 319, 4342, 9215, 236, 1735, -2850, 4738, 2423, };
const TfArray<48, float> quant34_scale = { 48, { 7.6233241998124868e-05, 0.0001191242117783986, 0.0001950539299286902, 0.00024880736600607634, 0.00054940930567681789, 0.0001387172524118796, 0.00014394319441635162, 9.6458548796363175e-05, 0.0001361390168312937, 0.00010411856055725366, 8.2496517279651016e-05, 4.0724080463405699e-05, 7.4128125561401248e-05, 6.184546509757638e-05, 0.00025691822520457208, 9.7334683232475072e-05, 0.00014382533845491707, 0.00032489089062437415, 0.00010855896107386798, 9.9848992249462754e-05, 0.00014216548879630864, 0.00038746083737351, 0.00012836692621931434, 0.00021773901244159788, 9.4035269285086542e-05, 5.1069124310743064e-05, 4.0441598684992641e-05, 8.4118335507810116e-05, 0.00021864761947654188, 0.00047387785161845386, 0.00017316784942522645, 0.00010832804400706664, 9.3077615019865334e-05, 0.0001431711862096563, 0.00020844511163886636, 9.0831228590104729e-05, 8.1958023656625301e-05, 3.4492339182179421e-05, 0.00022707202879246324, 5.9940441133221611e-05, 0.00020638249407056719, 0.00018159355386160314, 6.1382939748000354e-05, 7.7841570600867271e-05, 7.449552504112944e-05, 0.00043114443542435765, 6.3608837081119418e-05, 0.00022772411466576159, } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -41,-16,-30,-28,127,-66,81,-45,-91,-66,-17,-47,127,43,55,-127,74,-21,-7,-51,-66,127,17,35,7,71,60,-11,55,-47,44,-8,-127,-88,69,52,46,104,90,-77,-118,-25,22,76,51,-127,91,46, -41,-127,-81,51,-78,119,43,-43,-94,38,77,-127,119,83,114,-73,-77,-110,15,-52,-12,66,-95,127,-48,104,114,-127,60,-23,18,-118,-93,-87,71,127,98,82,115,-42,-127,-91,59,93,107,127,64,54, 12,-69,-43,68,-43,-47,33,-3,69,24,63,-118,-1,65,26,-23,-93,-23,13,-63,20,-17,-67,-10,-85,36,15,-89,19,67,127,-24,40,28,-18,35,70,47,49,19,-10,52,87,9,41,20,15,-127, 
  /* [0][1][][] */ -122,-112,-22,-79,-94,-83,95,-88,-127,-127,84,-82,114,52,-127,-121,127,-127,-70,-84,-63,77,-84,-6,13,116,103,-73,-100,-45,22,-31,-118,-127,-127,59,51,68,-4,-109,43,-9,64,95,58,119,127,-114, -59,-61,-127,-104,-31,127,127,-127,120,88,127,-105,110,127,54,-118,67,-103,-127,-127,-127,65,-127,86,-127,127,127,-87,-127,127,-13,-127,-96,-127,47,79,127,127,-19,-127,81,-113,127,127,127,10,113,52, -16,-46,-92,127,62,-47,40,-15,76,33,14,-46,-1,77,113,-98,-29,3,-29,-88,-47,29,-67,-31,-98,72,57,-115,-54,55,92,-19,-8,21,54,58,68,75,-27,-8,37,127,111,11,56,-41,11,2, 
  /* [0][2][][] */ -127,-61,2,6,-53,-42,-1,-4,72,-29,10,-35,30,8,-53,-51,-71,-30,69,-69,-48,15,-75,-7,18,44,69,-13,34,72,16,3,15,-95,-42,42,15,31,-57,-68,17,-10,18,33,24,76,23,-78, -110,-51,-46,-98,94,29,43,-55,106,38,-10,-38,31,17,-105,-119,39,-16,27,-77,-72,29,-79,45,-30,29,102,-43,47,21,-23,-31,-103,-50,-70,32,57,36,-127,-89,26,-56,89,45,46,-75,20,-38, -2,31,-47,-29,-5,-13,6,-25,-114,27,11,-45,-5,25,25,-59,51,46,-15,-85,-20,-25,-7,-33,-42,21,62,-28,35,-36,61,-49,-76,27,33,29,33,30,-49,-14,-5,37,47,17,18,-1,-3,7, 
};
const TfArray<48, float> quant35_scale = { 48, { 0.0032399126794189215, 0.0050627789460122585, 0.0082897916436195374, 0.010574312880635262, 0.02334989421069622, 0.0058954828418791294, 0.0061175855807960033, 0.0040994882583618164, 0.0057859080843627453, 0.0044250385835766792, 0.0035061019007116556, 0.0017307733651250601, 0.0031504451762884855, 0.0026284321211278439, 0.010919024236500263, 0.0041367239318788052, 0.0061125769279897213, 0.013807862997055054, 0.0046137557365000248, 0.0042435820214450359, 0.0060420329682528973, 0.016467085108160973, 0.0054555945098400116, 0.0092539079487323761, 0.0039964988827705383, 0.0021704377140849829, 0.0017187679186463356, 0.0035750293172895908, 0.0092925233766436577, 0.020139807835221291, 0.0073596332222223282, 0.0046039419248700142, 0.00395579868927598, 0.0060847755521535873, 0.0088589172810316086, 0.0038603271823376417, 0.0034832160454243422, 0.0014659243170171976, 0.0096505610272288322, 0.0025474687572568655, 0.0087712556123733521, 0.0077177258208394051, 0.0026087749283760786, 0.0033082666341215372, 0.0031660597305744886, 0.018323637545108795, 0.0027033754158765078, 0.009678274393081665, } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&g0::quant22_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data36[48] = { 1020, -332, -651, 1040, 8376, 1722, -360, 3607, 1758, 898, 155, 2276, 1012, 255, -704, 486, 2854, 11469, 3121, -1057, 1320, -1085, -109, 1917, -626, -570, 940, 17, 3008, 12267, 2750, -91, 233, -183, 2296, 9, 103, -146, 817, 1249, 2054, 2166, 146, 5, 716, 1960, 1387, 41, };
const TfArray<48, float> quant36_scale = { 48, { 0.00048601755406707525, 0.00057788280537351966, 0.00029869776335544884, 0.00034348873305134475, 0.00011173833627253771, 0.00039494776865467429, 0.00055966957006603479, 0.00024110067170113325, 0.00028404858312569559, 0.00063578481785953045, 0.00037880646414123476, 0.00034295956720598042, 0.00021243975788820535, 0.00048584683099761605, 0.00033605768112465739, 0.00030389250605367124, 0.00028895030845887959, 8.5185289208311588e-05, 0.00027708502602763474, 0.00034773244988173246, 0.00038121273973956704, 0.00017934957577381283, 0.00049415533430874348, 0.00034616523771546781, 0.00031919297180138528, 0.00074203847907483578, 0.00045151516678743064, 0.00090311228996142745, 0.00028092632419429719, 7.8564647992607206e-05, 0.00026970577891916037, 0.00064545130589976907, 0.00047677321708761156, 0.00036953811650164425, 0.00028161157388240099, 0.00039284152444452047, 0.00038825650699436665, 0.00075773603748530149, 0.00046931195538491011, 0.00052612787112593651, 0.00023027134011499584, 0.00034942993079312146, 0.00039034162182360888, 0.000460987095721066, 0.00042070916970260441, 0.00023430386499967426, 0.00025180238299071789, 0.00035950378514826298, } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ -50,20,0,-23,-86,-32,-127,26, 
  /* [1][0][][] */ 55,-29,-42,-51,127,-58,57,27, 
  /* [2][0][][] */ -127,107,-63,-124,31,-29,-31,63, 
  /* [3][0][][] */ 65,29,95,5,107,101,127,2, 
  /* [4][0][][] */ -71,-110,64,4,-85,-127,2,-21, 
  /* [5][0][][] */ 127,-32,70,71,-78,-4,9,-36, 
  /* [6][0][][] */ 19,34,127,-31,36,-39,-34,18, 
  /* [7][0][][] */ 29,0,-127,-27,-45,99,103,-65, 
  /* [8][0][][] */ -2,127,-6,22,54,125,33,53, 
  /* [9][0][][] */ -32,110,-60,33,8,-70,47,127, 
  /* [10][0][][] */ -3,-100,19,-40,-62,-127,-61,-88, 
  /* [11][0][][] */ -127,-89,108,59,-18,-63,89,67, 
  /* [12][0][][] */ -42,43,-127,69,40,-57,-79,109, 
  /* [13][0][][] */ 69,-127,91,67,-3,20,31,-57, 
  /* [14][0][][] */ -41,78,-29,-125,-17,-127,-19,-63, 
  /* [15][0][][] */ 24,110,35,-30,31,-48,98,-127, 
  /* [16][0][][] */ -127,-109,-50,83,-71,11,-19,68, 
  /* [17][0][][] */ -39,-81,-127,37,-27,60,-42,69, 
  /* [18][0][][] */ -88,-55,-62,82,-5,51,-15,127, 
  /* [19][0][][] */ 57,-127,66,-117,-33,-74,9,-7, 
  /* [20][0][][] */ 14,65,38,-8,51,127,53,-22, 
  /* [21][0][][] */ 12,113,52,-41,43,-66,106,-127, 
  /* [22][0][][] */ 19,10,104,15,-13,127,33,-40, 
  /* [23][0][][] */ -69,-50,27,-56,88,84,-71,-127, 
  /* [24][0][][] */ -117,-127,42,-98,117,121,-57,-119, 
  /* [25][0][][] */ 127,17,-52,-22,18,29,-65,-8, 
  /* [26][0][][] */ -124,-47,-127,-14,-57,-15,29,1, 
  /* [27][0][][] */ 76,20,7,-67,-127,-38,84,77, 
  /* [28][0][][] */ -127,-103,5,65,-65,-102,3,12, 
  /* [29][0][][] */ 92,108,40,-127,18,29,-63,-86, 
  /* [30][0][][] */ -66,-41,43,-74,65,79,-30,-127, 
  /* [31][0][][] */ 53,33,0,127,-8,-95,-10,4, 
  /* [32][0][][] */ -28,127,-14,27,18,50,-23,45, 
  /* [33][0][][] */ -40,127,-100,36,9,-11,-52,15, 
  /* [34][0][][] */ -120,-127,-65,121,16,26,25,82, 
  /* [35][0][][] */ -42,127,-22,-11,65,105,47,68, 
  /* [36][0][][] */ 84,50,0,-73,-127,-19,119,127, 
  /* [37][0][][] */ -50,100,28,12,-127,108,-25,-95, 
  /* [38][0][][] */ 6,42,24,18,127,86,81,41, 
  /* [39][0][][] */ -17,-57,25,-29,16,46,-97,127, 
  /* [40][0][][] */ -36,-101,-113,127,-60,-36,34,67, 
  /* [41][0][][] */ 127,12,69,90,-36,21,-5,-24, 
  /* [42][0][][] */ -40,4,-64,-127,57,-118,9,72, 
  /* [43][0][][] */ 15,-12,106,-7,31,127,113,-6, 
  /* [44][0][][] */ -19,-25,-57,127,47,2,-45,-41, 
  /* [45][0][][] */ 54,114,97,-127,29,-75,42,-98, 
  /* [46][0][][] */ -28,-104,-37,24,5,62,-75,127, 
  /* [47][0][][] */ 32,38,108,3,82,127,109,-12, 
};
const TfArray<48, float> quant37_scale = { 48, { 0.0047714393585920334, 0.0056733195669949055, 0.0029324418865144253, 0.0033721739891916513, 0.0010969823924824595, 0.003877368988469243, 0.0054945126175880432, 0.002366987057030201, 0.0027886247262358665, 0.0062417676672339439, 0.0037189030554145575, 0.0033669788390398026, 0.0020856107585132122, 0.0047697634436190128, 0.0032992199994623661, 0.0029834408778697252, 0.0028367470949888229, 0.0008362999651581049, 0.0027202607598155737, 0.0034138362389057875, 0.0037425262853503227, 0.0017607504269108176, 0.0048513314686715603, 0.0033984503243118525, 0.0031336522661149502, 0.0072849048301577568, 0.0044327150098979473, 0.0088662346825003624, 0.002757972339168191, 0.0007713023223914206, 0.0026478155050426722, 0.0063366680406033993, 0.0046806838363409042, 0.0036279116757214069, 0.0027646997477859259, 0.0038566910661756992, 0.0038116781506687403, 0.0074390145018696785, 0.0046074334532022476, 0.0051652193069458008, 0.0022606709972023964, 0.0034305010922253132, 0.0038321483880281448, 0.004525704775005579, 0.0041302796453237534, 0.0023002598900347948, 0.0024720502551645041, 0.0035294003318995237, } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data38[8] = { -6360, -2361, 12395, -10400, 23442, 6046, -9210, 11564, };
const TfArray<8, float> quant38_scale = { 8, { 0.00019524319213815033, 0.00025949871633201838, 0.00015179954061750323, 0.00027885453891940415, 0.00021726299019064754, 0.0001969971926882863, 0.00018084725888911635, 0.00022539819474332035, } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ -16,-19,-28,-63,-30,-41,21,-11,27,3,-35,-16,106,127,-23,-92, 
  /* [1][0][][] */ 127,-52,-44,23,-51,62,-72,-41,-44,74,-26,-51,-12,1,-61,-8, 
  /* [2][0][][] */ -32,-104,37,60,49,-68,-81,-7,30,-106,32,-127,47,-37,-89,28, 
  /* [3][0][][] */ 32,8,10,18,-15,71,-42,-17,127,48,14,13,-1,-11,8,17, 
  /* [4][0][][] */ -81,-42,-29,-118,-18,36,52,-120,29,-22,-43,-54,-127,32,-24,-14, 
  /* [5][0][][] */ 92,53,68,-33,48,-46,-127,-114,-14,-71,57,35,-47,55,60,-42, 
  /* [6][0][][] */ 115,33,-127,-79,27,-81,-6,-83,-47,12,-123,105,76,-109,11,95, 
  /* [7][0][][] */ -127,-4,102,-33,-69,9,7,-73,-57,72,101,-33,60,-24,23,19, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0082978354766964912, 0.011028694920241833, 0.0064514805562794209, 0.011851317249238491, 0.0092336768284440041, 0.0083723803982138634, 0.007686008233577013, 0.0095794228836894035, } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data40[16] = { 19160, -51, -524, 3003, -1576, 1233, 8274, 1596, -1054, -88, -1636, 2851, 2382, -1518, -822, -510, };
const TfArray<16, float> quant40_scale = { 16, { 0.00012601290654856712, 0.00035920343361794949, 0.00016596546629443765, 0.00017897076031658798, 0.0010851251427084208, 0.00094500003615394235, 0.00017015656339935958, 0.00066704326309263706, 0.00039848178857937455, 0.0012916189152747393, 0.00032998912502080202, 0.00026991975028067827, 0.00011868688307004049, 0.00016562061500735581, 0.00024733884492889047, 0.00099793949630111456, } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ -2,-12,21,14,-16,9,3,15,2,-10,-14,-11,-10,1,0,-4, 4,-4,21,14,17,-4,12,-27,-9,9,-19,62,7,26,2,-2, -1,-19,9,12,3,-16,0,11,4,3,-12,-22,-6,0,-10,-4, 
  /* [0][1][][] */ 4,-14,-13,4,127,-27,-127,-21,127,127,-6,-2,83,-16,-4,-21, -127,127,127,-4,-81,-95,-6,-102,9,-103,127,127,127,127,127,127, 19,-18,-11,-7,-9,127,12,-8,0,-11,-3,0,-2,1,-6,-11, 
  /* [0][2][][] */ -5,-6,4,-17,-16,14,63,7,-9,-7,-10,0,-4,7,-6,-14, 22,-24,3,-127,9,-18,0,127,-12,2,10,-21,-12,-49,-9,-38, 3,-3,6,4,2,-7,8,-1,-1,3,-1,-9,-8,0,-8,-13, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.0053555485792458057, 0.015266145579516888, 0.0070535321719944477, 0.0076062572188675404, 0.046117816120386124, 0.040162499994039536, 0.007231653667986393, 0.028349338099360466, 0.016935475170612335, 0.054893802851438522, 0.014024537056684494, 0.011471589095890522, 0.0050441925413906574, 0.0070388759486377239, 0.01051190122961998, 0.042412430047988892, } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&g0::quant8_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data42[16] = { 2974, -3042, -225, 5041, 36032, 53215, 6181, 9598, 4336, 4563, -352, -134, 2522, -16835, -2340, 30055, };
const TfArray<16, float> quant42_scale = { 16, { 0.00024237199977505952, 0.00051026156870648265, 0.00028754849336110055, 0.00019550052820704877, 4.3536871089600027e-05, 2.9882312446716242e-05, 0.00015893299132585526, 2.901395782828331e-05, 0.00021910412760917097, 6.3190105720423162e-05, 0.00051547825569286942, 0.00076206267112866044, 0.00053232925711199641, 2.9649372663698159e-05, 0.00050704274326562881, 5.7999892305815592e-05, } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data43[16*3*3*1] = { 
  /* [0][0][][] */ -90, -114, -33, 
  /* [0][1][][] */ 66, -40, 15, 
  /* [0][2][][] */ 30, 127, 18, 
  /* [1][0][][] */ 114, -94, -6, 
  /* [1][1][][] */ -127, 113, 29, 
  /* [1][2][][] */ 17, 3, -11, 
  /* [2][0][][] */ -22, -1, -48, 
  /* [2][1][][] */ 37, 97, 127, 
  /* [2][2][][] */ -11, -94, -81, 
  /* [3][0][][] */ 110, 115, 50, 
  /* [3][1][][] */ -4, -26, -19, 
  /* [3][2][][] */ -102, -127, -47, 
  /* [4][0][][] */ 30, -39, 22, 
  /* [4][1][][] */ 23, -127, 6, 
  /* [4][2][][] */ 16, -86, -9, 
  /* [5][0][][] */ -70, 26, -2, 
  /* [5][1][][] */ -127, 33, 0, 
  /* [5][2][][] */ -74, 28, -4, 
  /* [6][0][][] */ -18, 79, 127, 
  /* [6][1][][] */ -54, 54, -20, 
  /* [6][2][][] */ -39, -55, -93, 
  /* [7][0][][] */ 74, 53, -1, 
  /* [7][1][][] */ 127, 64, -22, 
  /* [7][2][][] */ 16, -16, -48, 
  /* [8][0][][] */ -22, -31, 52, 
  /* [8][1][][] */ -54, -87, 127, 
  /* [8][2][][] */ -26, -61, 97, 
  /* [9][0][][] */ -40, 50, -22, 
  /* [9][1][][] */ -37, 127, -24, 
  /* [9][2][][] */ -24, 83, -11, 
  /* [10][0][][] */ 27, 90, 14, 
  /* [10][1][][] */ -36, -127, -28, 
  /* [10][2][][] */ 14, 42, 19, 
  /* [11][0][][] */ 7, -19, 10, 
  /* [11][1][][] */ 65, -93, 35, 
  /* [11][2][][] */ -85, 127, -47, 
  /* [12][0][][] */ -40, 50, -9, 
  /* [12][1][][] */ -127, 116, 6, 
  /* [12][2][][] */ -78, 81, 6, 
  /* [13][0][][] */ 56, -11, -22, 
  /* [13][1][][] */ 102, 71, -9, 
  /* [13][2][][] */ 87, 127, 48, 
  /* [14][0][][] */ -27, -25, 52, 
  /* [14][1][][] */ 49, 104, -127, 
  /* [14][2][][] */ -13, -68, 84, 
  /* [15][0][][] */ -103, -59, 38, 
  /* [15][1][][] */ -114, -127, 47, 
  /* [15][2][][] */ 9, -45, 17, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,1 } };
const TfArray<16, float> quant43_scale = { 16, { 0.093759596347808838, 0.19739046692848206, 0.11123575270175934, 0.075627759099006653, 0.01684187725186348, 0.011559724807739258, 0.061481911689043045, 0.011223808862268925, 0.084758616983890533, 0.024444568902254105, 0.19940848648548126, 0.2947976291179657, 0.20592714846134186, 0.011469613760709763, 0.19614528119564056, 0.022436777129769325, } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.10185973346233368, } };
const TfArray<1, int> quant46_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.067724056541919708, } };
const TfArray<1, int> quant50_zero = { 1, { -23 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<1, float> quant53_scale = { 1, { 0.064931102097034454, } };
const TfArray<1, int> quant53_zero = { 1, { -10 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<1, float> quant54_scale = { 1, { 0.096033178269863129, } };
const TfArray<1, int> quant54_zero = { 1, { -16 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.047969285398721695, } };
const TfArray<1, int> quant58_zero = { 1, { 6 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.02108316496014595, } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfArray<1, float> quant60_scale = { 1, { 0.02285245805978775, } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfArray<1, float> quant61_scale = { 1, { 0.052410148084163666, } };
const TfArray<1, int> quant61_zero = { 1, { -6 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<1, float> quant62_scale = { 1, { 0.074946805834770203, } };
const TfArray<1, int> quant62_zero = { 1, { -9 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<1, float> quant63_scale = { 1, { 0.020389348268508911, } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfArray<1, float> quant65_scale = { 1, { 0.045199170708656311, } };
const TfArray<1, int> quant65_zero = { 1, { 13 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<1, float> quant66_scale = { 1, { 0.10391678661108017, } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&g0::quant61_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.045858811587095261, } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,3 } };
const TfArray<1, float> quant69_scale = { 1, { 0.1134965717792511, } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&g0::quant62_zero, 0 };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 96, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36912), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16128), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 432), (TfLiteIntArray*)&g0::tensor_dimension69, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension69, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_6_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_6_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_6_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_6_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_6_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
